Grammar:

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     translation_unit -> external_declaration
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> function_definition
Rule 6     function_definition -> STATIC type_specifier declarator compound_statement
Rule 7     function_definition -> type_specifier declarator compound_statement
Rule 8     declaration -> EXTERN type_specifier declarator SEMICOLON
Rule 9     declaration -> type_specifier declarator SEMICOLON
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list_opt -> empty
Rule 12    declaration_list -> declaration_list declaration
Rule 13    declaration_list -> declaration
Rule 14    type_specifier -> VOID
Rule 15    type_specifier -> CHAR
Rule 16    type_specifier -> DOUBLE
Rule 17    type_specifier -> FLOAT
Rule 18    type_specifier -> INT
Rule 19    declarator -> TIMES declarator
Rule 20    declarator -> direct_declarator
Rule 21    direct_declarator -> direct_declarator LPAR RPAR
Rule 22    direct_declarator -> direct_declarator LPAR parameter_type_list RPAR
Rule 23    direct_declarator -> ID
Rule 24    parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 25    parameter_type_list -> parameter_list
Rule 26    parameter_list -> parameter_list COMMA parameter_declaration
Rule 27    parameter_list -> parameter_declaration
Rule 28    parameter_declaration -> type_specifier declarator
Rule 29    compound_statement -> LBRACE declaration_list_opt RBRACE
Rule 30    compound_statement -> LBRACE declaration_list_opt statement_list RBRACE
Rule 31    expression_statement -> expression SEMICOLON
Rule 32    expression -> equality_expression DIVIDE_ASSIGN expression
Rule 33    expression -> equality_expression MODULO_ASSIGN expression
Rule 34    expression -> equality_expression TIMES_ASSIGN expression
Rule 35    expression -> equality_expression PLUS_ASSIGN expression
Rule 36    expression -> equality_expression MINUS_ASSIGN expression
Rule 37    expression -> equality_expression DECREMENT
Rule 38    expression -> equality_expression INCREMENT
Rule 39    expression -> equality_expression ASSIGN expression
Rule 40    expression -> equality_expression
Rule 41    equality_expression -> equality_expression NE relational_expression
Rule 42    equality_expression -> equality_expression EQ relational_expression
Rule 43    equality_expression -> relational_expression
Rule 44    relational_expression -> relational_expression LOR additive_expression
Rule 45    relational_expression -> relational_expression LAND additive_expression
Rule 46    relational_expression -> relational_expression GE additive_expression
Rule 47    relational_expression -> relational_expression GT additive_expression
Rule 48    relational_expression -> relational_expression LE additive_expression
Rule 49    relational_expression -> relational_expression LT additive_expression
Rule 50    relational_expression -> additive_expression
Rule 51    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 52    postfix_expression -> postfix_expression LPAR RPAR
Rule 53    postfix_expression -> postfix_expression LPAR argument_expression_list RPAR
Rule 54    postfix_expression -> primary_expression
Rule 55    argument_expression_list -> argument_expression_list COMMA expression
Rule 56    argument_expression_list -> expression
Rule 57    unary_expression -> AMPERSAND unary_expression
Rule 58    unary_expression -> TIMES unary_expression
Rule 59    unary_expression -> LNOT unary_expression
Rule 60    unary_expression -> PLUS unary_expression
Rule 61    unary_expression -> MINUS unary_expression
Rule 62    unary_expression -> postfix_expression
Rule 63    mult_expression -> mult_expression MODULO unary_expression
Rule 64    mult_expression -> mult_expression DIVIDE unary_expression
Rule 65    mult_expression -> mult_expression TIMES unary_expression
Rule 66    mult_expression -> unary_expression
Rule 67    additive_expression -> additive_expression MINUS mult_expression
Rule 68    additive_expression -> additive_expression PLUS mult_expression
Rule 69    additive_expression -> mult_expression
Rule 70    primary_expression -> LPAR expression RPAR
Rule 71    primary_expression -> string_literal
Rule 72    primary_expression -> CHARACTER
Rule 73    primary_expression -> INUMBER
Rule 74    primary_expression -> FNUMBER
Rule 75    primary_expression -> ID
Rule 76    string_literal -> string_literal STRING
Rule 77    string_literal -> STRING
Rule 78    statement -> open_statement
Rule 79    statement -> matched_statement
Rule 80    simple_statement -> jump_statement
Rule 81    simple_statement -> expression_statement
Rule 82    simple_statement -> compound_statement
Rule 83    jump_statement -> CONTINUE SEMICOLON
Rule 84    jump_statement -> BREAK SEMICOLON
Rule 85    jump_statement -> RETURN expression SEMICOLON
Rule 86    jump_statement -> RETURN SEMICOLON
Rule 87    open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement
Rule 88    open_if -> IF LPAR expression RPAR statement
Rule 89    matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement
Rule 90    open_while -> WHILE LPAR expression RPAR open_statement
Rule 91    matched_while -> WHILE LPAR expression RPAR matched_statement
Rule 92    matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR
Rule 93    open_dowhile -> DO open_statement WHILE LPAR expression RPAR
Rule 94    open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement
Rule 95    matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement
Rule 96    matched_statement -> simple_statement
Rule 97    matched_statement -> matched_for
Rule 98    matched_statement -> matched_dowhile
Rule 99    matched_statement -> matched_while
Rule 100   matched_statement -> matched_if
Rule 101   open_statement -> open_for
Rule 102   open_statement -> open_dowhile
Rule 103   open_statement -> open_while
Rule 104   open_statement -> open_if
Rule 105   statement_list -> statement_list statement
Rule 106   statement_list -> statement
Rule 107   empty -> <empty>

Terminals, with rules where they appear:

AMPERSAND            : 57
ASSIGN               : 39
BREAK                : 84
CHAR                 : 15
CHARACTER            : 72
COMMA                : 24 26 55
CONTINUE             : 83
DECREMENT            : 37
DIVIDE               : 64
DIVIDE_ASSIGN        : 32
DO                   : 92 93
DOUBLE               : 16
ELLIPSIS             : 24
ELSE                 : 87 89
EQ                   : 42
EXTERN               : 8
FLOAT                : 17
FNUMBER              : 74
FOR                  : 94 95
GE                   : 46
GT                   : 47
ID                   : 23 75
IF                   : 87 88 89
INCREMENT            : 38
INT                  : 18
INUMBER              : 73
LAND                 : 45
LBRACE               : 29 30
LBRACKET             : 51
LE                   : 48
LNOT                 : 59
LOR                  : 44
LPAR                 : 21 22 52 53 70 87 88 89 90 91 92 93 94 95
LT                   : 49
MINUS                : 61 67
MINUS_ASSIGN         : 36
MODULO               : 63
MODULO_ASSIGN        : 33
NE                   : 41
PLUS                 : 60 68
PLUS_ASSIGN          : 35
RBRACE               : 29 30
RBRACKET             : 51
RETURN               : 85 86
RPAR                 : 21 22 52 53 70 87 88 89 90 91 92 93 94 95
SEMICOLON            : 8 9 31 83 84 85 86
STATIC               : 6
STRING               : 76 77
TIMES                : 19 58 65
TIMES_ASSIGN         : 34
VOID                 : 14
WHILE                : 90 91 92 93
error                : 

Nonterminals, with rules where they appear:

additive_expression  : 44 45 46 47 48 49 50 67 68
argument_expression_list : 53 55
compound_statement   : 6 7 82
declaration          : 4 12 13
declaration_list     : 10 12
declaration_list_opt : 29 30
declarator           : 6 7 8 9 19 28
direct_declarator    : 20 21 22
empty                : 11
equality_expression  : 32 33 34 35 36 37 38 39 40 41 42
expression           : 31 32 33 34 35 36 39 51 55 56 70 85 87 88 89 90 91 92 93 94 95
expression_statement : 81 94 94 95 95
external_declaration : 2 3
function_definition  : 5
jump_statement       : 80
matched_dowhile      : 98
matched_for          : 97
matched_if           : 100
matched_statement    : 79 87 89 89 91 92 95
matched_while        : 99
mult_expression      : 63 64 65 67 68 69
open_dowhile         : 102
open_for             : 101
open_if              : 104
open_statement       : 78 87 90 93 94
open_while           : 103
parameter_declaration : 26 27
parameter_list       : 24 25 26
parameter_type_list  : 22
postfix_expression   : 51 52 53 62
primary_expression   : 54
program              : 0
relational_expression : 41 42 43 44 45 46 47 48 49
simple_statement     : 96
statement            : 88 105 106
statement_list       : 30 105
string_literal       : 71 76
translation_unit     : 1 2
type_specifier       : 6 7 8 9 28
unary_expression     : 57 58 59 60 61 63 64 65 66


state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . translation_unit external_declaration
    (3) translation_unit -> . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (9) declaration -> . type_specifier declarator SEMICOLON
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 1

    (0) S' -> program .


state 2

    (1) program -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (9) declaration -> . type_specifier declarator SEMICOLON
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    $end            reduce using rule 1 (program -> translation_unit .)
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    external_declaration           shift and go to state 14
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 3

    (3) translation_unit -> external_declaration .
    EXTERN          reduce using rule 3 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> external_declaration .)
    INT             reduce using rule 3 (translation_unit -> external_declaration .)
    $end            reduce using rule 3 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> declaration .
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) external_declaration -> function_definition .
    EXTERN          reduce using rule 5 (external_declaration -> function_definition .)
    STATIC          reduce using rule 5 (external_declaration -> function_definition .)
    VOID            reduce using rule 5 (external_declaration -> function_definition .)
    CHAR            reduce using rule 5 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 5 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (external_declaration -> function_definition .)
    INT             reduce using rule 5 (external_declaration -> function_definition .)
    $end            reduce using rule 5 (external_declaration -> function_definition .)


state 6

    (8) declaration -> EXTERN . type_specifier declarator SEMICOLON
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    type_specifier                 shift and go to state 15

state 7

    (9) declaration -> type_specifier . declarator SEMICOLON
    (7) function_definition -> type_specifier . declarator compound_statement
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 16
    direct_declarator              shift and go to state 18

state 8

    (6) function_definition -> STATIC . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    type_specifier                 shift and go to state 20

state 9

    (14) type_specifier -> VOID .
    TIMES           reduce using rule 14 (type_specifier -> VOID .)
    ID              reduce using rule 14 (type_specifier -> VOID .)


state 10

    (15) type_specifier -> CHAR .
    TIMES           reduce using rule 15 (type_specifier -> CHAR .)
    ID              reduce using rule 15 (type_specifier -> CHAR .)


state 11

    (16) type_specifier -> DOUBLE .
    TIMES           reduce using rule 16 (type_specifier -> DOUBLE .)
    ID              reduce using rule 16 (type_specifier -> DOUBLE .)


state 12

    (17) type_specifier -> FLOAT .
    TIMES           reduce using rule 17 (type_specifier -> FLOAT .)
    ID              reduce using rule 17 (type_specifier -> FLOAT .)


state 13

    (18) type_specifier -> INT .
    TIMES           reduce using rule 18 (type_specifier -> INT .)
    ID              reduce using rule 18 (type_specifier -> INT .)


state 14

    (2) translation_unit -> translation_unit external_declaration .
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 15

    (8) declaration -> EXTERN type_specifier . declarator SEMICOLON
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 21
    direct_declarator              shift and go to state 18

state 16

    (9) declaration -> type_specifier declarator . SEMICOLON
    (7) function_definition -> type_specifier declarator . compound_statement
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    SEMICOLON       shift and go to state 22
    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 23

state 17

    (19) declarator -> TIMES . declarator
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 25
    direct_declarator              shift and go to state 18

state 18

    (20) declarator -> direct_declarator .
    (21) direct_declarator -> direct_declarator . LPAR RPAR
    (22) direct_declarator -> direct_declarator . LPAR parameter_type_list RPAR
    SEMICOLON       reduce using rule 20 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 20 (declarator -> direct_declarator .)
    COMMA           reduce using rule 20 (declarator -> direct_declarator .)
    RPAR            reduce using rule 20 (declarator -> direct_declarator .)
    LPAR            shift and go to state 26


state 19

    (23) direct_declarator -> ID .
    LPAR            reduce using rule 23 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 23 (direct_declarator -> ID .)
    LBRACE          reduce using rule 23 (direct_declarator -> ID .)
    COMMA           reduce using rule 23 (direct_declarator -> ID .)
    RPAR            reduce using rule 23 (direct_declarator -> ID .)


state 20

    (6) function_definition -> STATIC type_specifier . declarator compound_statement
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 27
    direct_declarator              shift and go to state 18

state 21

    (8) declaration -> EXTERN type_specifier declarator . SEMICOLON
    SEMICOLON       shift and go to state 28


state 22

    (9) declaration -> type_specifier declarator SEMICOLON .
    EXTERN          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    VOID            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    DOUBLE          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    $end            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    DO              reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    TIMES           reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    LNOT            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    LPAR            reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    ID              reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 9 (declaration -> type_specifier declarator SEMICOLON .)


state 23

    (7) function_definition -> type_specifier declarator compound_statement .
    EXTERN          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)


state 24

    (29) compound_statement -> LBRACE . declaration_list_opt RBRACE
    (30) compound_statement -> LBRACE . declaration_list_opt statement_list RBRACE
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (12) declaration_list -> . declaration_list declaration
    (13) declaration_list -> . declaration
    (107) empty -> .
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (9) declaration -> . type_specifier declarator SEMICOLON
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    RBRACE          reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    CONTINUE        reduce using rule 107 (empty -> .)
    BREAK           reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    LBRACE          reduce using rule 107 (empty -> .)
    AMPERSAND       reduce using rule 107 (empty -> .)
    TIMES           reduce using rule 107 (empty -> .)
    LNOT            reduce using rule 107 (empty -> .)
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LPAR            reduce using rule 107 (empty -> .)
    CHARACTER       reduce using rule 107 (empty -> .)
    INUMBER         reduce using rule 107 (empty -> .)
    FNUMBER         reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    STRING          reduce using rule 107 (empty -> .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    declaration_list_opt           shift and go to state 29
    declaration_list               shift and go to state 30
    empty                          shift and go to state 31
    declaration                    shift and go to state 32
    type_specifier                 shift and go to state 33

state 25

    (19) declarator -> TIMES declarator .
    SEMICOLON       reduce using rule 19 (declarator -> TIMES declarator .)
    LBRACE          reduce using rule 19 (declarator -> TIMES declarator .)
    COMMA           reduce using rule 19 (declarator -> TIMES declarator .)
    RPAR            reduce using rule 19 (declarator -> TIMES declarator .)


state 26

    (21) direct_declarator -> direct_declarator LPAR . RPAR
    (22) direct_declarator -> direct_declarator LPAR . parameter_type_list RPAR
    (24) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (25) parameter_type_list -> . parameter_list
    (26) parameter_list -> . parameter_list COMMA parameter_declaration
    (27) parameter_list -> . parameter_declaration
    (28) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    RPAR            shift and go to state 34
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    parameter_type_list            shift and go to state 35
    parameter_list                 shift and go to state 36
    parameter_declaration          shift and go to state 37
    type_specifier                 shift and go to state 38

state 27

    (6) function_definition -> STATIC type_specifier declarator . compound_statement
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 39

state 28

    (8) declaration -> EXTERN type_specifier declarator SEMICOLON .
    EXTERN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    VOID            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DOUBLE          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INT             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    $end            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    DO              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    IF              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    TIMES           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LNOT            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LPAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    ID              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)


state 29

    (29) compound_statement -> LBRACE declaration_list_opt . RBRACE
    (30) compound_statement -> LBRACE declaration_list_opt . statement_list RBRACE
    (105) statement_list -> . statement_list statement
    (106) statement_list -> . statement
    (78) statement -> . open_statement
    (79) statement -> . matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    RBRACE          shift and go to state 40
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    statement_list                 shift and go to state 41
    statement                      shift and go to state 42
    open_statement                 shift and go to state 43
    matched_statement              shift and go to state 44
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    expression_statement           shift and go to state 56
    expression                     shift and go to state 57
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 30

    (10) declaration_list_opt -> declaration_list .
    (12) declaration_list -> declaration_list . declaration
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (9) declaration -> . type_specifier declarator SEMICOLON
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    RBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    DO              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    AMPERSAND       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    TIMES           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LNOT            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LPAR            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FNUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    declaration                    shift and go to state 84
    type_specifier                 shift and go to state 33

state 31

    (11) declaration_list_opt -> empty .
    RBRACE          reduce using rule 11 (declaration_list_opt -> empty .)
    FOR             reduce using rule 11 (declaration_list_opt -> empty .)
    DO              reduce using rule 11 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 11 (declaration_list_opt -> empty .)
    IF              reduce using rule 11 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 11 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 11 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 11 (declaration_list_opt -> empty .)
    LBRACE          reduce using rule 11 (declaration_list_opt -> empty .)
    AMPERSAND       reduce using rule 11 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 11 (declaration_list_opt -> empty .)
    LNOT            reduce using rule 11 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 11 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 11 (declaration_list_opt -> empty .)
    LPAR            reduce using rule 11 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 11 (declaration_list_opt -> empty .)
    INUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    FNUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    ID              reduce using rule 11 (declaration_list_opt -> empty .)
    STRING          reduce using rule 11 (declaration_list_opt -> empty .)


state 32

    (13) declaration_list -> declaration .
    EXTERN          reduce using rule 13 (declaration_list -> declaration .)
    VOID            reduce using rule 13 (declaration_list -> declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 13 (declaration_list -> declaration .)
    FLOAT           reduce using rule 13 (declaration_list -> declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration .)
    RBRACE          reduce using rule 13 (declaration_list -> declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration .)
    DO              reduce using rule 13 (declaration_list -> declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 13 (declaration_list -> declaration .)
    BREAK           reduce using rule 13 (declaration_list -> declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration .)
    LBRACE          reduce using rule 13 (declaration_list -> declaration .)
    AMPERSAND       reduce using rule 13 (declaration_list -> declaration .)
    TIMES           reduce using rule 13 (declaration_list -> declaration .)
    LNOT            reduce using rule 13 (declaration_list -> declaration .)
    PLUS            reduce using rule 13 (declaration_list -> declaration .)
    MINUS           reduce using rule 13 (declaration_list -> declaration .)
    LPAR            reduce using rule 13 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 13 (declaration_list -> declaration .)
    INUMBER         reduce using rule 13 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 13 (declaration_list -> declaration .)
    ID              reduce using rule 13 (declaration_list -> declaration .)
    STRING          reduce using rule 13 (declaration_list -> declaration .)


state 33

    (9) declaration -> type_specifier . declarator SEMICOLON
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 85
    direct_declarator              shift and go to state 18

state 34

    (21) direct_declarator -> direct_declarator LPAR RPAR .
    LPAR            reduce using rule 21 (direct_declarator -> direct_declarator LPAR RPAR .)
    SEMICOLON       reduce using rule 21 (direct_declarator -> direct_declarator LPAR RPAR .)
    LBRACE          reduce using rule 21 (direct_declarator -> direct_declarator LPAR RPAR .)
    COMMA           reduce using rule 21 (direct_declarator -> direct_declarator LPAR RPAR .)
    RPAR            reduce using rule 21 (direct_declarator -> direct_declarator LPAR RPAR .)


state 35

    (22) direct_declarator -> direct_declarator LPAR parameter_type_list . RPAR
    RPAR            shift and go to state 86


state 36

    (24) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (25) parameter_type_list -> parameter_list .
    (26) parameter_list -> parameter_list . COMMA parameter_declaration
    COMMA           shift and go to state 87
    RPAR            reduce using rule 25 (parameter_type_list -> parameter_list .)


state 37

    (27) parameter_list -> parameter_declaration .
    COMMA           reduce using rule 27 (parameter_list -> parameter_declaration .)
    RPAR            reduce using rule 27 (parameter_list -> parameter_declaration .)


state 38

    (28) parameter_declaration -> type_specifier . declarator
    (19) declarator -> . TIMES declarator
    (20) declarator -> . direct_declarator
    (21) direct_declarator -> . direct_declarator LPAR RPAR
    (22) direct_declarator -> . direct_declarator LPAR parameter_type_list RPAR
    (23) direct_declarator -> . ID
    TIMES           shift and go to state 17
    ID              shift and go to state 19

    declarator                     shift and go to state 88
    direct_declarator              shift and go to state 18

state 39

    (6) function_definition -> STATIC type_specifier declarator compound_statement .
    EXTERN          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    VOID            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)


state 40

    (29) compound_statement -> LBRACE declaration_list_opt RBRACE .
    EXTERN          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    STATIC          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    VOID            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHAR            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DOUBLE          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FLOAT           reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INT             reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    $end            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RBRACE          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FOR             reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    DO              reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    WHILE           reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    IF              reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CONTINUE        reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    BREAK           reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RETURN          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LBRACE          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    AMPERSAND       reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    TIMES           reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LNOT            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    PLUS            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    MINUS           reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LPAR            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHARACTER       reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INUMBER         reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FNUMBER         reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ID              reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    STRING          reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ELSE            reduce using rule 29 (compound_statement -> LBRACE declaration_list_opt RBRACE .)


state 41

    (30) compound_statement -> LBRACE declaration_list_opt statement_list . RBRACE
    (105) statement_list -> statement_list . statement
    (78) statement -> . open_statement
    (79) statement -> . matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    RBRACE          shift and go to state 89
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    statement                      shift and go to state 90
    open_statement                 shift and go to state 43
    matched_statement              shift and go to state 44
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    expression_statement           shift and go to state 56
    expression                     shift and go to state 57
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 42

    (106) statement_list -> statement .
    RBRACE          reduce using rule 106 (statement_list -> statement .)
    FOR             reduce using rule 106 (statement_list -> statement .)
    DO              reduce using rule 106 (statement_list -> statement .)
    WHILE           reduce using rule 106 (statement_list -> statement .)
    IF              reduce using rule 106 (statement_list -> statement .)
    CONTINUE        reduce using rule 106 (statement_list -> statement .)
    BREAK           reduce using rule 106 (statement_list -> statement .)
    RETURN          reduce using rule 106 (statement_list -> statement .)
    LBRACE          reduce using rule 106 (statement_list -> statement .)
    AMPERSAND       reduce using rule 106 (statement_list -> statement .)
    TIMES           reduce using rule 106 (statement_list -> statement .)
    LNOT            reduce using rule 106 (statement_list -> statement .)
    PLUS            reduce using rule 106 (statement_list -> statement .)
    MINUS           reduce using rule 106 (statement_list -> statement .)
    LPAR            reduce using rule 106 (statement_list -> statement .)
    CHARACTER       reduce using rule 106 (statement_list -> statement .)
    INUMBER         reduce using rule 106 (statement_list -> statement .)
    FNUMBER         reduce using rule 106 (statement_list -> statement .)
    ID              reduce using rule 106 (statement_list -> statement .)
    STRING          reduce using rule 106 (statement_list -> statement .)


state 43

    (78) statement -> open_statement .
    RBRACE          reduce using rule 78 (statement -> open_statement .)
    FOR             reduce using rule 78 (statement -> open_statement .)
    DO              reduce using rule 78 (statement -> open_statement .)
    WHILE           reduce using rule 78 (statement -> open_statement .)
    IF              reduce using rule 78 (statement -> open_statement .)
    CONTINUE        reduce using rule 78 (statement -> open_statement .)
    BREAK           reduce using rule 78 (statement -> open_statement .)
    RETURN          reduce using rule 78 (statement -> open_statement .)
    LBRACE          reduce using rule 78 (statement -> open_statement .)
    AMPERSAND       reduce using rule 78 (statement -> open_statement .)
    TIMES           reduce using rule 78 (statement -> open_statement .)
    LNOT            reduce using rule 78 (statement -> open_statement .)
    PLUS            reduce using rule 78 (statement -> open_statement .)
    MINUS           reduce using rule 78 (statement -> open_statement .)
    LPAR            reduce using rule 78 (statement -> open_statement .)
    CHARACTER       reduce using rule 78 (statement -> open_statement .)
    INUMBER         reduce using rule 78 (statement -> open_statement .)
    FNUMBER         reduce using rule 78 (statement -> open_statement .)
    ID              reduce using rule 78 (statement -> open_statement .)
    STRING          reduce using rule 78 (statement -> open_statement .)


state 44

    (79) statement -> matched_statement .
    RBRACE          reduce using rule 79 (statement -> matched_statement .)
    FOR             reduce using rule 79 (statement -> matched_statement .)
    DO              reduce using rule 79 (statement -> matched_statement .)
    WHILE           reduce using rule 79 (statement -> matched_statement .)
    IF              reduce using rule 79 (statement -> matched_statement .)
    CONTINUE        reduce using rule 79 (statement -> matched_statement .)
    BREAK           reduce using rule 79 (statement -> matched_statement .)
    RETURN          reduce using rule 79 (statement -> matched_statement .)
    LBRACE          reduce using rule 79 (statement -> matched_statement .)
    AMPERSAND       reduce using rule 79 (statement -> matched_statement .)
    TIMES           reduce using rule 79 (statement -> matched_statement .)
    LNOT            reduce using rule 79 (statement -> matched_statement .)
    PLUS            reduce using rule 79 (statement -> matched_statement .)
    MINUS           reduce using rule 79 (statement -> matched_statement .)
    LPAR            reduce using rule 79 (statement -> matched_statement .)
    CHARACTER       reduce using rule 79 (statement -> matched_statement .)
    INUMBER         reduce using rule 79 (statement -> matched_statement .)
    FNUMBER         reduce using rule 79 (statement -> matched_statement .)
    ID              reduce using rule 79 (statement -> matched_statement .)
    STRING          reduce using rule 79 (statement -> matched_statement .)


state 45

    (101) open_statement -> open_for .
    RBRACE          reduce using rule 101 (open_statement -> open_for .)
    FOR             reduce using rule 101 (open_statement -> open_for .)
    DO              reduce using rule 101 (open_statement -> open_for .)
    WHILE           reduce using rule 101 (open_statement -> open_for .)
    IF              reduce using rule 101 (open_statement -> open_for .)
    CONTINUE        reduce using rule 101 (open_statement -> open_for .)
    BREAK           reduce using rule 101 (open_statement -> open_for .)
    RETURN          reduce using rule 101 (open_statement -> open_for .)
    LBRACE          reduce using rule 101 (open_statement -> open_for .)
    AMPERSAND       reduce using rule 101 (open_statement -> open_for .)
    TIMES           reduce using rule 101 (open_statement -> open_for .)
    LNOT            reduce using rule 101 (open_statement -> open_for .)
    PLUS            reduce using rule 101 (open_statement -> open_for .)
    MINUS           reduce using rule 101 (open_statement -> open_for .)
    LPAR            reduce using rule 101 (open_statement -> open_for .)
    CHARACTER       reduce using rule 101 (open_statement -> open_for .)
    INUMBER         reduce using rule 101 (open_statement -> open_for .)
    FNUMBER         reduce using rule 101 (open_statement -> open_for .)
    ID              reduce using rule 101 (open_statement -> open_for .)
    STRING          reduce using rule 101 (open_statement -> open_for .)


state 46

    (102) open_statement -> open_dowhile .
    RBRACE          reduce using rule 102 (open_statement -> open_dowhile .)
    FOR             reduce using rule 102 (open_statement -> open_dowhile .)
    DO              reduce using rule 102 (open_statement -> open_dowhile .)
    WHILE           reduce using rule 102 (open_statement -> open_dowhile .)
    IF              reduce using rule 102 (open_statement -> open_dowhile .)
    CONTINUE        reduce using rule 102 (open_statement -> open_dowhile .)
    BREAK           reduce using rule 102 (open_statement -> open_dowhile .)
    RETURN          reduce using rule 102 (open_statement -> open_dowhile .)
    LBRACE          reduce using rule 102 (open_statement -> open_dowhile .)
    AMPERSAND       reduce using rule 102 (open_statement -> open_dowhile .)
    TIMES           reduce using rule 102 (open_statement -> open_dowhile .)
    LNOT            reduce using rule 102 (open_statement -> open_dowhile .)
    PLUS            reduce using rule 102 (open_statement -> open_dowhile .)
    MINUS           reduce using rule 102 (open_statement -> open_dowhile .)
    LPAR            reduce using rule 102 (open_statement -> open_dowhile .)
    CHARACTER       reduce using rule 102 (open_statement -> open_dowhile .)
    INUMBER         reduce using rule 102 (open_statement -> open_dowhile .)
    FNUMBER         reduce using rule 102 (open_statement -> open_dowhile .)
    ID              reduce using rule 102 (open_statement -> open_dowhile .)
    STRING          reduce using rule 102 (open_statement -> open_dowhile .)


state 47

    (103) open_statement -> open_while .
    RBRACE          reduce using rule 103 (open_statement -> open_while .)
    FOR             reduce using rule 103 (open_statement -> open_while .)
    DO              reduce using rule 103 (open_statement -> open_while .)
    WHILE           reduce using rule 103 (open_statement -> open_while .)
    IF              reduce using rule 103 (open_statement -> open_while .)
    CONTINUE        reduce using rule 103 (open_statement -> open_while .)
    BREAK           reduce using rule 103 (open_statement -> open_while .)
    RETURN          reduce using rule 103 (open_statement -> open_while .)
    LBRACE          reduce using rule 103 (open_statement -> open_while .)
    AMPERSAND       reduce using rule 103 (open_statement -> open_while .)
    TIMES           reduce using rule 103 (open_statement -> open_while .)
    LNOT            reduce using rule 103 (open_statement -> open_while .)
    PLUS            reduce using rule 103 (open_statement -> open_while .)
    MINUS           reduce using rule 103 (open_statement -> open_while .)
    LPAR            reduce using rule 103 (open_statement -> open_while .)
    CHARACTER       reduce using rule 103 (open_statement -> open_while .)
    INUMBER         reduce using rule 103 (open_statement -> open_while .)
    FNUMBER         reduce using rule 103 (open_statement -> open_while .)
    ID              reduce using rule 103 (open_statement -> open_while .)
    STRING          reduce using rule 103 (open_statement -> open_while .)


state 48

    (104) open_statement -> open_if .
    RBRACE          reduce using rule 104 (open_statement -> open_if .)
    FOR             reduce using rule 104 (open_statement -> open_if .)
    DO              reduce using rule 104 (open_statement -> open_if .)
    WHILE           reduce using rule 104 (open_statement -> open_if .)
    IF              reduce using rule 104 (open_statement -> open_if .)
    CONTINUE        reduce using rule 104 (open_statement -> open_if .)
    BREAK           reduce using rule 104 (open_statement -> open_if .)
    RETURN          reduce using rule 104 (open_statement -> open_if .)
    LBRACE          reduce using rule 104 (open_statement -> open_if .)
    AMPERSAND       reduce using rule 104 (open_statement -> open_if .)
    TIMES           reduce using rule 104 (open_statement -> open_if .)
    LNOT            reduce using rule 104 (open_statement -> open_if .)
    PLUS            reduce using rule 104 (open_statement -> open_if .)
    MINUS           reduce using rule 104 (open_statement -> open_if .)
    LPAR            reduce using rule 104 (open_statement -> open_if .)
    CHARACTER       reduce using rule 104 (open_statement -> open_if .)
    INUMBER         reduce using rule 104 (open_statement -> open_if .)
    FNUMBER         reduce using rule 104 (open_statement -> open_if .)
    ID              reduce using rule 104 (open_statement -> open_if .)
    STRING          reduce using rule 104 (open_statement -> open_if .)


state 49

    (96) matched_statement -> simple_statement .
    RBRACE          reduce using rule 96 (matched_statement -> simple_statement .)
    FOR             reduce using rule 96 (matched_statement -> simple_statement .)
    DO              reduce using rule 96 (matched_statement -> simple_statement .)
    WHILE           reduce using rule 96 (matched_statement -> simple_statement .)
    IF              reduce using rule 96 (matched_statement -> simple_statement .)
    CONTINUE        reduce using rule 96 (matched_statement -> simple_statement .)
    BREAK           reduce using rule 96 (matched_statement -> simple_statement .)
    RETURN          reduce using rule 96 (matched_statement -> simple_statement .)
    LBRACE          reduce using rule 96 (matched_statement -> simple_statement .)
    AMPERSAND       reduce using rule 96 (matched_statement -> simple_statement .)
    TIMES           reduce using rule 96 (matched_statement -> simple_statement .)
    LNOT            reduce using rule 96 (matched_statement -> simple_statement .)
    PLUS            reduce using rule 96 (matched_statement -> simple_statement .)
    MINUS           reduce using rule 96 (matched_statement -> simple_statement .)
    LPAR            reduce using rule 96 (matched_statement -> simple_statement .)
    CHARACTER       reduce using rule 96 (matched_statement -> simple_statement .)
    INUMBER         reduce using rule 96 (matched_statement -> simple_statement .)
    FNUMBER         reduce using rule 96 (matched_statement -> simple_statement .)
    ID              reduce using rule 96 (matched_statement -> simple_statement .)
    STRING          reduce using rule 96 (matched_statement -> simple_statement .)
    ELSE            reduce using rule 96 (matched_statement -> simple_statement .)


state 50

    (97) matched_statement -> matched_for .
    RBRACE          reduce using rule 97 (matched_statement -> matched_for .)
    FOR             reduce using rule 97 (matched_statement -> matched_for .)
    DO              reduce using rule 97 (matched_statement -> matched_for .)
    WHILE           reduce using rule 97 (matched_statement -> matched_for .)
    IF              reduce using rule 97 (matched_statement -> matched_for .)
    CONTINUE        reduce using rule 97 (matched_statement -> matched_for .)
    BREAK           reduce using rule 97 (matched_statement -> matched_for .)
    RETURN          reduce using rule 97 (matched_statement -> matched_for .)
    LBRACE          reduce using rule 97 (matched_statement -> matched_for .)
    AMPERSAND       reduce using rule 97 (matched_statement -> matched_for .)
    TIMES           reduce using rule 97 (matched_statement -> matched_for .)
    LNOT            reduce using rule 97 (matched_statement -> matched_for .)
    PLUS            reduce using rule 97 (matched_statement -> matched_for .)
    MINUS           reduce using rule 97 (matched_statement -> matched_for .)
    LPAR            reduce using rule 97 (matched_statement -> matched_for .)
    CHARACTER       reduce using rule 97 (matched_statement -> matched_for .)
    INUMBER         reduce using rule 97 (matched_statement -> matched_for .)
    FNUMBER         reduce using rule 97 (matched_statement -> matched_for .)
    ID              reduce using rule 97 (matched_statement -> matched_for .)
    STRING          reduce using rule 97 (matched_statement -> matched_for .)
    ELSE            reduce using rule 97 (matched_statement -> matched_for .)


state 51

    (98) matched_statement -> matched_dowhile .
    RBRACE          reduce using rule 98 (matched_statement -> matched_dowhile .)
    FOR             reduce using rule 98 (matched_statement -> matched_dowhile .)
    DO              reduce using rule 98 (matched_statement -> matched_dowhile .)
    WHILE           reduce using rule 98 (matched_statement -> matched_dowhile .)
    IF              reduce using rule 98 (matched_statement -> matched_dowhile .)
    CONTINUE        reduce using rule 98 (matched_statement -> matched_dowhile .)
    BREAK           reduce using rule 98 (matched_statement -> matched_dowhile .)
    RETURN          reduce using rule 98 (matched_statement -> matched_dowhile .)
    LBRACE          reduce using rule 98 (matched_statement -> matched_dowhile .)
    AMPERSAND       reduce using rule 98 (matched_statement -> matched_dowhile .)
    TIMES           reduce using rule 98 (matched_statement -> matched_dowhile .)
    LNOT            reduce using rule 98 (matched_statement -> matched_dowhile .)
    PLUS            reduce using rule 98 (matched_statement -> matched_dowhile .)
    MINUS           reduce using rule 98 (matched_statement -> matched_dowhile .)
    LPAR            reduce using rule 98 (matched_statement -> matched_dowhile .)
    CHARACTER       reduce using rule 98 (matched_statement -> matched_dowhile .)
    INUMBER         reduce using rule 98 (matched_statement -> matched_dowhile .)
    FNUMBER         reduce using rule 98 (matched_statement -> matched_dowhile .)
    ID              reduce using rule 98 (matched_statement -> matched_dowhile .)
    STRING          reduce using rule 98 (matched_statement -> matched_dowhile .)
    ELSE            reduce using rule 98 (matched_statement -> matched_dowhile .)


state 52

    (99) matched_statement -> matched_while .
    RBRACE          reduce using rule 99 (matched_statement -> matched_while .)
    FOR             reduce using rule 99 (matched_statement -> matched_while .)
    DO              reduce using rule 99 (matched_statement -> matched_while .)
    WHILE           reduce using rule 99 (matched_statement -> matched_while .)
    IF              reduce using rule 99 (matched_statement -> matched_while .)
    CONTINUE        reduce using rule 99 (matched_statement -> matched_while .)
    BREAK           reduce using rule 99 (matched_statement -> matched_while .)
    RETURN          reduce using rule 99 (matched_statement -> matched_while .)
    LBRACE          reduce using rule 99 (matched_statement -> matched_while .)
    AMPERSAND       reduce using rule 99 (matched_statement -> matched_while .)
    TIMES           reduce using rule 99 (matched_statement -> matched_while .)
    LNOT            reduce using rule 99 (matched_statement -> matched_while .)
    PLUS            reduce using rule 99 (matched_statement -> matched_while .)
    MINUS           reduce using rule 99 (matched_statement -> matched_while .)
    LPAR            reduce using rule 99 (matched_statement -> matched_while .)
    CHARACTER       reduce using rule 99 (matched_statement -> matched_while .)
    INUMBER         reduce using rule 99 (matched_statement -> matched_while .)
    FNUMBER         reduce using rule 99 (matched_statement -> matched_while .)
    ID              reduce using rule 99 (matched_statement -> matched_while .)
    STRING          reduce using rule 99 (matched_statement -> matched_while .)
    ELSE            reduce using rule 99 (matched_statement -> matched_while .)


state 53

    (100) matched_statement -> matched_if .
    RBRACE          reduce using rule 100 (matched_statement -> matched_if .)
    FOR             reduce using rule 100 (matched_statement -> matched_if .)
    DO              reduce using rule 100 (matched_statement -> matched_if .)
    WHILE           reduce using rule 100 (matched_statement -> matched_if .)
    IF              reduce using rule 100 (matched_statement -> matched_if .)
    CONTINUE        reduce using rule 100 (matched_statement -> matched_if .)
    BREAK           reduce using rule 100 (matched_statement -> matched_if .)
    RETURN          reduce using rule 100 (matched_statement -> matched_if .)
    LBRACE          reduce using rule 100 (matched_statement -> matched_if .)
    AMPERSAND       reduce using rule 100 (matched_statement -> matched_if .)
    TIMES           reduce using rule 100 (matched_statement -> matched_if .)
    LNOT            reduce using rule 100 (matched_statement -> matched_if .)
    PLUS            reduce using rule 100 (matched_statement -> matched_if .)
    MINUS           reduce using rule 100 (matched_statement -> matched_if .)
    LPAR            reduce using rule 100 (matched_statement -> matched_if .)
    CHARACTER       reduce using rule 100 (matched_statement -> matched_if .)
    INUMBER         reduce using rule 100 (matched_statement -> matched_if .)
    FNUMBER         reduce using rule 100 (matched_statement -> matched_if .)
    ID              reduce using rule 100 (matched_statement -> matched_if .)
    STRING          reduce using rule 100 (matched_statement -> matched_if .)
    ELSE            reduce using rule 100 (matched_statement -> matched_if .)


state 54

    (94) open_for -> FOR . LPAR expression_statement expression_statement expression RPAR open_statement
    (95) matched_for -> FOR . LPAR expression_statement expression_statement expression RPAR matched_statement
    LPAR            shift and go to state 91


state 55

    (70) primary_expression -> LPAR . expression RPAR
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 92
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 56

    (81) simple_statement -> expression_statement .
    RBRACE          reduce using rule 81 (simple_statement -> expression_statement .)
    FOR             reduce using rule 81 (simple_statement -> expression_statement .)
    DO              reduce using rule 81 (simple_statement -> expression_statement .)
    WHILE           reduce using rule 81 (simple_statement -> expression_statement .)
    IF              reduce using rule 81 (simple_statement -> expression_statement .)
    CONTINUE        reduce using rule 81 (simple_statement -> expression_statement .)
    BREAK           reduce using rule 81 (simple_statement -> expression_statement .)
    RETURN          reduce using rule 81 (simple_statement -> expression_statement .)
    LBRACE          reduce using rule 81 (simple_statement -> expression_statement .)
    AMPERSAND       reduce using rule 81 (simple_statement -> expression_statement .)
    TIMES           reduce using rule 81 (simple_statement -> expression_statement .)
    LNOT            reduce using rule 81 (simple_statement -> expression_statement .)
    PLUS            reduce using rule 81 (simple_statement -> expression_statement .)
    MINUS           reduce using rule 81 (simple_statement -> expression_statement .)
    LPAR            reduce using rule 81 (simple_statement -> expression_statement .)
    CHARACTER       reduce using rule 81 (simple_statement -> expression_statement .)
    INUMBER         reduce using rule 81 (simple_statement -> expression_statement .)
    FNUMBER         reduce using rule 81 (simple_statement -> expression_statement .)
    ID              reduce using rule 81 (simple_statement -> expression_statement .)
    STRING          reduce using rule 81 (simple_statement -> expression_statement .)
    ELSE            reduce using rule 81 (simple_statement -> expression_statement .)


state 57

    (31) expression_statement -> expression . SEMICOLON
    SEMICOLON       shift and go to state 93


state 58

    (93) open_dowhile -> DO . open_statement WHILE LPAR expression RPAR
    (92) matched_dowhile -> DO . matched_statement WHILE LPAR expression RPAR
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    open_statement                 shift and go to state 94
    expression                     shift and go to state 57
    matched_statement              shift and go to state 95
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    expression_statement           shift and go to state 56
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 59

    (90) open_while -> WHILE . LPAR expression RPAR open_statement
    (91) matched_while -> WHILE . LPAR expression RPAR matched_statement
    LPAR            shift and go to state 96


state 60

    (87) open_if -> IF . LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> IF . LPAR expression RPAR statement
    (89) matched_if -> IF . LPAR expression RPAR matched_statement ELSE matched_statement
    LPAR            shift and go to state 97


state 61

    (80) simple_statement -> jump_statement .
    RBRACE          reduce using rule 80 (simple_statement -> jump_statement .)
    FOR             reduce using rule 80 (simple_statement -> jump_statement .)
    DO              reduce using rule 80 (simple_statement -> jump_statement .)
    WHILE           reduce using rule 80 (simple_statement -> jump_statement .)
    IF              reduce using rule 80 (simple_statement -> jump_statement .)
    CONTINUE        reduce using rule 80 (simple_statement -> jump_statement .)
    BREAK           reduce using rule 80 (simple_statement -> jump_statement .)
    RETURN          reduce using rule 80 (simple_statement -> jump_statement .)
    LBRACE          reduce using rule 80 (simple_statement -> jump_statement .)
    AMPERSAND       reduce using rule 80 (simple_statement -> jump_statement .)
    TIMES           reduce using rule 80 (simple_statement -> jump_statement .)
    LNOT            reduce using rule 80 (simple_statement -> jump_statement .)
    PLUS            reduce using rule 80 (simple_statement -> jump_statement .)
    MINUS           reduce using rule 80 (simple_statement -> jump_statement .)
    LPAR            reduce using rule 80 (simple_statement -> jump_statement .)
    CHARACTER       reduce using rule 80 (simple_statement -> jump_statement .)
    INUMBER         reduce using rule 80 (simple_statement -> jump_statement .)
    FNUMBER         reduce using rule 80 (simple_statement -> jump_statement .)
    ID              reduce using rule 80 (simple_statement -> jump_statement .)
    STRING          reduce using rule 80 (simple_statement -> jump_statement .)
    ELSE            reduce using rule 80 (simple_statement -> jump_statement .)


state 62

    (82) simple_statement -> compound_statement .
    RBRACE          reduce using rule 82 (simple_statement -> compound_statement .)
    FOR             reduce using rule 82 (simple_statement -> compound_statement .)
    DO              reduce using rule 82 (simple_statement -> compound_statement .)
    WHILE           reduce using rule 82 (simple_statement -> compound_statement .)
    IF              reduce using rule 82 (simple_statement -> compound_statement .)
    CONTINUE        reduce using rule 82 (simple_statement -> compound_statement .)
    BREAK           reduce using rule 82 (simple_statement -> compound_statement .)
    RETURN          reduce using rule 82 (simple_statement -> compound_statement .)
    LBRACE          reduce using rule 82 (simple_statement -> compound_statement .)
    AMPERSAND       reduce using rule 82 (simple_statement -> compound_statement .)
    TIMES           reduce using rule 82 (simple_statement -> compound_statement .)
    LNOT            reduce using rule 82 (simple_statement -> compound_statement .)
    PLUS            reduce using rule 82 (simple_statement -> compound_statement .)
    MINUS           reduce using rule 82 (simple_statement -> compound_statement .)
    LPAR            reduce using rule 82 (simple_statement -> compound_statement .)
    CHARACTER       reduce using rule 82 (simple_statement -> compound_statement .)
    INUMBER         reduce using rule 82 (simple_statement -> compound_statement .)
    FNUMBER         reduce using rule 82 (simple_statement -> compound_statement .)
    ID              reduce using rule 82 (simple_statement -> compound_statement .)
    STRING          reduce using rule 82 (simple_statement -> compound_statement .)
    ELSE            reduce using rule 82 (simple_statement -> compound_statement .)


state 63

    (83) jump_statement -> CONTINUE . SEMICOLON
    SEMICOLON       shift and go to state 98


state 64

    (84) jump_statement -> BREAK . SEMICOLON
    SEMICOLON       shift and go to state 99


state 65

    (85) jump_statement -> RETURN . expression SEMICOLON
    (86) jump_statement -> RETURN . SEMICOLON
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    SEMICOLON       shift and go to state 101
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 100
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 66

    (32) expression -> equality_expression . DIVIDE_ASSIGN expression
    (33) expression -> equality_expression . MODULO_ASSIGN expression
    (34) expression -> equality_expression . TIMES_ASSIGN expression
    (35) expression -> equality_expression . PLUS_ASSIGN expression
    (36) expression -> equality_expression . MINUS_ASSIGN expression
    (37) expression -> equality_expression . DECREMENT
    (38) expression -> equality_expression . INCREMENT
    (39) expression -> equality_expression . ASSIGN expression
    (40) expression -> equality_expression .
    (41) equality_expression -> equality_expression . NE relational_expression
    (42) equality_expression -> equality_expression . EQ relational_expression
    DIVIDE_ASSIGN   shift and go to state 102
    MODULO_ASSIGN   shift and go to state 103
    TIMES_ASSIGN    shift and go to state 104
    PLUS_ASSIGN     shift and go to state 105
    MINUS_ASSIGN    shift and go to state 106
    DECREMENT       shift and go to state 107
    INCREMENT       shift and go to state 108
    ASSIGN          shift and go to state 109
    SEMICOLON       reduce using rule 40 (expression -> equality_expression .)
    RPAR            reduce using rule 40 (expression -> equality_expression .)
    RBRACKET        reduce using rule 40 (expression -> equality_expression .)
    COMMA           reduce using rule 40 (expression -> equality_expression .)
    NE              shift and go to state 110
    EQ              shift and go to state 111


state 67

    (43) equality_expression -> relational_expression .
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . LAND additive_expression
    (46) relational_expression -> relational_expression . GE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LE additive_expression
    (49) relational_expression -> relational_expression . LT additive_expression
    DIVIDE_ASSIGN   reduce using rule 43 (equality_expression -> relational_expression .)
    MODULO_ASSIGN   reduce using rule 43 (equality_expression -> relational_expression .)
    TIMES_ASSIGN    reduce using rule 43 (equality_expression -> relational_expression .)
    PLUS_ASSIGN     reduce using rule 43 (equality_expression -> relational_expression .)
    MINUS_ASSIGN    reduce using rule 43 (equality_expression -> relational_expression .)
    DECREMENT       reduce using rule 43 (equality_expression -> relational_expression .)
    INCREMENT       reduce using rule 43 (equality_expression -> relational_expression .)
    ASSIGN          reduce using rule 43 (equality_expression -> relational_expression .)
    NE              reduce using rule 43 (equality_expression -> relational_expression .)
    EQ              reduce using rule 43 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 43 (equality_expression -> relational_expression .)
    RPAR            reduce using rule 43 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 43 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 43 (equality_expression -> relational_expression .)
    LOR             shift and go to state 112
    LAND            shift and go to state 113
    GE              shift and go to state 114
    GT              shift and go to state 115
    LE              shift and go to state 116
    LT              shift and go to state 117


state 68

    (50) relational_expression -> additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 50 (relational_expression -> additive_expression .)
    LAND            reduce using rule 50 (relational_expression -> additive_expression .)
    GE              reduce using rule 50 (relational_expression -> additive_expression .)
    GT              reduce using rule 50 (relational_expression -> additive_expression .)
    LE              reduce using rule 50 (relational_expression -> additive_expression .)
    LT              reduce using rule 50 (relational_expression -> additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 50 (relational_expression -> additive_expression .)
    MODULO_ASSIGN   reduce using rule 50 (relational_expression -> additive_expression .)
    TIMES_ASSIGN    reduce using rule 50 (relational_expression -> additive_expression .)
    PLUS_ASSIGN     reduce using rule 50 (relational_expression -> additive_expression .)
    MINUS_ASSIGN    reduce using rule 50 (relational_expression -> additive_expression .)
    DECREMENT       reduce using rule 50 (relational_expression -> additive_expression .)
    INCREMENT       reduce using rule 50 (relational_expression -> additive_expression .)
    ASSIGN          reduce using rule 50 (relational_expression -> additive_expression .)
    NE              reduce using rule 50 (relational_expression -> additive_expression .)
    EQ              reduce using rule 50 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 50 (relational_expression -> additive_expression .)
    RPAR            reduce using rule 50 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 50 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 50 (relational_expression -> additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 69

    (61) unary_expression -> MINUS . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 70

    (69) additive_expression -> mult_expression .
    (63) mult_expression -> mult_expression . MODULO unary_expression
    (64) mult_expression -> mult_expression . DIVIDE unary_expression
    (65) mult_expression -> mult_expression . TIMES unary_expression
    MINUS           reduce using rule 69 (additive_expression -> mult_expression .)
    PLUS            reduce using rule 69 (additive_expression -> mult_expression .)
    LOR             reduce using rule 69 (additive_expression -> mult_expression .)
    LAND            reduce using rule 69 (additive_expression -> mult_expression .)
    GE              reduce using rule 69 (additive_expression -> mult_expression .)
    GT              reduce using rule 69 (additive_expression -> mult_expression .)
    LE              reduce using rule 69 (additive_expression -> mult_expression .)
    LT              reduce using rule 69 (additive_expression -> mult_expression .)
    DIVIDE_ASSIGN   reduce using rule 69 (additive_expression -> mult_expression .)
    MODULO_ASSIGN   reduce using rule 69 (additive_expression -> mult_expression .)
    TIMES_ASSIGN    reduce using rule 69 (additive_expression -> mult_expression .)
    PLUS_ASSIGN     reduce using rule 69 (additive_expression -> mult_expression .)
    MINUS_ASSIGN    reduce using rule 69 (additive_expression -> mult_expression .)
    DECREMENT       reduce using rule 69 (additive_expression -> mult_expression .)
    INCREMENT       reduce using rule 69 (additive_expression -> mult_expression .)
    ASSIGN          reduce using rule 69 (additive_expression -> mult_expression .)
    NE              reduce using rule 69 (additive_expression -> mult_expression .)
    EQ              reduce using rule 69 (additive_expression -> mult_expression .)
    SEMICOLON       reduce using rule 69 (additive_expression -> mult_expression .)
    RPAR            reduce using rule 69 (additive_expression -> mult_expression .)
    RBRACKET        reduce using rule 69 (additive_expression -> mult_expression .)
    COMMA           reduce using rule 69 (additive_expression -> mult_expression .)
    MODULO          shift and go to state 121
    DIVIDE          shift and go to state 122
    TIMES           shift and go to state 123


state 71

    (60) unary_expression -> PLUS . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 124
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 72

    (66) mult_expression -> unary_expression .
    MODULO          reduce using rule 66 (mult_expression -> unary_expression .)
    DIVIDE          reduce using rule 66 (mult_expression -> unary_expression .)
    TIMES           reduce using rule 66 (mult_expression -> unary_expression .)
    MINUS           reduce using rule 66 (mult_expression -> unary_expression .)
    PLUS            reduce using rule 66 (mult_expression -> unary_expression .)
    LOR             reduce using rule 66 (mult_expression -> unary_expression .)
    LAND            reduce using rule 66 (mult_expression -> unary_expression .)
    GE              reduce using rule 66 (mult_expression -> unary_expression .)
    GT              reduce using rule 66 (mult_expression -> unary_expression .)
    LE              reduce using rule 66 (mult_expression -> unary_expression .)
    LT              reduce using rule 66 (mult_expression -> unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 66 (mult_expression -> unary_expression .)
    MODULO_ASSIGN   reduce using rule 66 (mult_expression -> unary_expression .)
    TIMES_ASSIGN    reduce using rule 66 (mult_expression -> unary_expression .)
    PLUS_ASSIGN     reduce using rule 66 (mult_expression -> unary_expression .)
    MINUS_ASSIGN    reduce using rule 66 (mult_expression -> unary_expression .)
    DECREMENT       reduce using rule 66 (mult_expression -> unary_expression .)
    INCREMENT       reduce using rule 66 (mult_expression -> unary_expression .)
    ASSIGN          reduce using rule 66 (mult_expression -> unary_expression .)
    NE              reduce using rule 66 (mult_expression -> unary_expression .)
    EQ              reduce using rule 66 (mult_expression -> unary_expression .)
    SEMICOLON       reduce using rule 66 (mult_expression -> unary_expression .)
    RPAR            reduce using rule 66 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 66 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 66 (mult_expression -> unary_expression .)


state 73

    (58) unary_expression -> TIMES . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 74

    (57) unary_expression -> AMPERSAND . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 75

    (59) unary_expression -> LNOT . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 76

    (62) unary_expression -> postfix_expression .
    (51) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (52) postfix_expression -> postfix_expression . LPAR RPAR
    (53) postfix_expression -> postfix_expression . LPAR argument_expression_list RPAR
    MODULO          reduce using rule 62 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 62 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 62 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 62 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 62 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 62 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 62 (unary_expression -> postfix_expression .)
    GE              reduce using rule 62 (unary_expression -> postfix_expression .)
    GT              reduce using rule 62 (unary_expression -> postfix_expression .)
    LE              reduce using rule 62 (unary_expression -> postfix_expression .)
    LT              reduce using rule 62 (unary_expression -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 62 (unary_expression -> postfix_expression .)
    MODULO_ASSIGN   reduce using rule 62 (unary_expression -> postfix_expression .)
    TIMES_ASSIGN    reduce using rule 62 (unary_expression -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 62 (unary_expression -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 62 (unary_expression -> postfix_expression .)
    DECREMENT       reduce using rule 62 (unary_expression -> postfix_expression .)
    INCREMENT       reduce using rule 62 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 62 (unary_expression -> postfix_expression .)
    NE              reduce using rule 62 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 62 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 62 (unary_expression -> postfix_expression .)
    RPAR            reduce using rule 62 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 62 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 62 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 128
    LPAR            shift and go to state 129


state 77

    (54) postfix_expression -> primary_expression .
    LBRACKET        reduce using rule 54 (postfix_expression -> primary_expression .)
    LPAR            reduce using rule 54 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 54 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 54 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 54 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 54 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 54 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 54 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 54 (postfix_expression -> primary_expression .)
    GE              reduce using rule 54 (postfix_expression -> primary_expression .)
    GT              reduce using rule 54 (postfix_expression -> primary_expression .)
    LE              reduce using rule 54 (postfix_expression -> primary_expression .)
    LT              reduce using rule 54 (postfix_expression -> primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 54 (postfix_expression -> primary_expression .)
    MODULO_ASSIGN   reduce using rule 54 (postfix_expression -> primary_expression .)
    TIMES_ASSIGN    reduce using rule 54 (postfix_expression -> primary_expression .)
    PLUS_ASSIGN     reduce using rule 54 (postfix_expression -> primary_expression .)
    MINUS_ASSIGN    reduce using rule 54 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 54 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 54 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 54 (postfix_expression -> primary_expression .)
    NE              reduce using rule 54 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 54 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 54 (postfix_expression -> primary_expression .)
    RPAR            reduce using rule 54 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 54 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 54 (postfix_expression -> primary_expression .)


state 78

    (71) primary_expression -> string_literal .
    (76) string_literal -> string_literal . STRING
    LBRACKET        reduce using rule 71 (primary_expression -> string_literal .)
    LPAR            reduce using rule 71 (primary_expression -> string_literal .)
    MODULO          reduce using rule 71 (primary_expression -> string_literal .)
    DIVIDE          reduce using rule 71 (primary_expression -> string_literal .)
    TIMES           reduce using rule 71 (primary_expression -> string_literal .)
    MINUS           reduce using rule 71 (primary_expression -> string_literal .)
    PLUS            reduce using rule 71 (primary_expression -> string_literal .)
    LOR             reduce using rule 71 (primary_expression -> string_literal .)
    LAND            reduce using rule 71 (primary_expression -> string_literal .)
    GE              reduce using rule 71 (primary_expression -> string_literal .)
    GT              reduce using rule 71 (primary_expression -> string_literal .)
    LE              reduce using rule 71 (primary_expression -> string_literal .)
    LT              reduce using rule 71 (primary_expression -> string_literal .)
    DIVIDE_ASSIGN   reduce using rule 71 (primary_expression -> string_literal .)
    MODULO_ASSIGN   reduce using rule 71 (primary_expression -> string_literal .)
    TIMES_ASSIGN    reduce using rule 71 (primary_expression -> string_literal .)
    PLUS_ASSIGN     reduce using rule 71 (primary_expression -> string_literal .)
    MINUS_ASSIGN    reduce using rule 71 (primary_expression -> string_literal .)
    DECREMENT       reduce using rule 71 (primary_expression -> string_literal .)
    INCREMENT       reduce using rule 71 (primary_expression -> string_literal .)
    ASSIGN          reduce using rule 71 (primary_expression -> string_literal .)
    NE              reduce using rule 71 (primary_expression -> string_literal .)
    EQ              reduce using rule 71 (primary_expression -> string_literal .)
    SEMICOLON       reduce using rule 71 (primary_expression -> string_literal .)
    RPAR            reduce using rule 71 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 71 (primary_expression -> string_literal .)
    COMMA           reduce using rule 71 (primary_expression -> string_literal .)
    STRING          shift and go to state 130


state 79

    (72) primary_expression -> CHARACTER .
    LBRACKET        reduce using rule 72 (primary_expression -> CHARACTER .)
    LPAR            reduce using rule 72 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 72 (primary_expression -> CHARACTER .)
    DIVIDE          reduce using rule 72 (primary_expression -> CHARACTER .)
    TIMES           reduce using rule 72 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 72 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 72 (primary_expression -> CHARACTER .)
    LOR             reduce using rule 72 (primary_expression -> CHARACTER .)
    LAND            reduce using rule 72 (primary_expression -> CHARACTER .)
    GE              reduce using rule 72 (primary_expression -> CHARACTER .)
    GT              reduce using rule 72 (primary_expression -> CHARACTER .)
    LE              reduce using rule 72 (primary_expression -> CHARACTER .)
    LT              reduce using rule 72 (primary_expression -> CHARACTER .)
    DIVIDE_ASSIGN   reduce using rule 72 (primary_expression -> CHARACTER .)
    MODULO_ASSIGN   reduce using rule 72 (primary_expression -> CHARACTER .)
    TIMES_ASSIGN    reduce using rule 72 (primary_expression -> CHARACTER .)
    PLUS_ASSIGN     reduce using rule 72 (primary_expression -> CHARACTER .)
    MINUS_ASSIGN    reduce using rule 72 (primary_expression -> CHARACTER .)
    DECREMENT       reduce using rule 72 (primary_expression -> CHARACTER .)
    INCREMENT       reduce using rule 72 (primary_expression -> CHARACTER .)
    ASSIGN          reduce using rule 72 (primary_expression -> CHARACTER .)
    NE              reduce using rule 72 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 72 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 72 (primary_expression -> CHARACTER .)
    RPAR            reduce using rule 72 (primary_expression -> CHARACTER .)
    RBRACKET        reduce using rule 72 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 72 (primary_expression -> CHARACTER .)


state 80

    (73) primary_expression -> INUMBER .
    LBRACKET        reduce using rule 73 (primary_expression -> INUMBER .)
    LPAR            reduce using rule 73 (primary_expression -> INUMBER .)
    MODULO          reduce using rule 73 (primary_expression -> INUMBER .)
    DIVIDE          reduce using rule 73 (primary_expression -> INUMBER .)
    TIMES           reduce using rule 73 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 73 (primary_expression -> INUMBER .)
    PLUS            reduce using rule 73 (primary_expression -> INUMBER .)
    LOR             reduce using rule 73 (primary_expression -> INUMBER .)
    LAND            reduce using rule 73 (primary_expression -> INUMBER .)
    GE              reduce using rule 73 (primary_expression -> INUMBER .)
    GT              reduce using rule 73 (primary_expression -> INUMBER .)
    LE              reduce using rule 73 (primary_expression -> INUMBER .)
    LT              reduce using rule 73 (primary_expression -> INUMBER .)
    DIVIDE_ASSIGN   reduce using rule 73 (primary_expression -> INUMBER .)
    MODULO_ASSIGN   reduce using rule 73 (primary_expression -> INUMBER .)
    TIMES_ASSIGN    reduce using rule 73 (primary_expression -> INUMBER .)
    PLUS_ASSIGN     reduce using rule 73 (primary_expression -> INUMBER .)
    MINUS_ASSIGN    reduce using rule 73 (primary_expression -> INUMBER .)
    DECREMENT       reduce using rule 73 (primary_expression -> INUMBER .)
    INCREMENT       reduce using rule 73 (primary_expression -> INUMBER .)
    ASSIGN          reduce using rule 73 (primary_expression -> INUMBER .)
    NE              reduce using rule 73 (primary_expression -> INUMBER .)
    EQ              reduce using rule 73 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 73 (primary_expression -> INUMBER .)
    RPAR            reduce using rule 73 (primary_expression -> INUMBER .)
    RBRACKET        reduce using rule 73 (primary_expression -> INUMBER .)
    COMMA           reduce using rule 73 (primary_expression -> INUMBER .)


state 81

    (74) primary_expression -> FNUMBER .
    LBRACKET        reduce using rule 74 (primary_expression -> FNUMBER .)
    LPAR            reduce using rule 74 (primary_expression -> FNUMBER .)
    MODULO          reduce using rule 74 (primary_expression -> FNUMBER .)
    DIVIDE          reduce using rule 74 (primary_expression -> FNUMBER .)
    TIMES           reduce using rule 74 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 74 (primary_expression -> FNUMBER .)
    PLUS            reduce using rule 74 (primary_expression -> FNUMBER .)
    LOR             reduce using rule 74 (primary_expression -> FNUMBER .)
    LAND            reduce using rule 74 (primary_expression -> FNUMBER .)
    GE              reduce using rule 74 (primary_expression -> FNUMBER .)
    GT              reduce using rule 74 (primary_expression -> FNUMBER .)
    LE              reduce using rule 74 (primary_expression -> FNUMBER .)
    LT              reduce using rule 74 (primary_expression -> FNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 74 (primary_expression -> FNUMBER .)
    MODULO_ASSIGN   reduce using rule 74 (primary_expression -> FNUMBER .)
    TIMES_ASSIGN    reduce using rule 74 (primary_expression -> FNUMBER .)
    PLUS_ASSIGN     reduce using rule 74 (primary_expression -> FNUMBER .)
    MINUS_ASSIGN    reduce using rule 74 (primary_expression -> FNUMBER .)
    DECREMENT       reduce using rule 74 (primary_expression -> FNUMBER .)
    INCREMENT       reduce using rule 74 (primary_expression -> FNUMBER .)
    ASSIGN          reduce using rule 74 (primary_expression -> FNUMBER .)
    NE              reduce using rule 74 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 74 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 74 (primary_expression -> FNUMBER .)
    RPAR            reduce using rule 74 (primary_expression -> FNUMBER .)
    RBRACKET        reduce using rule 74 (primary_expression -> FNUMBER .)
    COMMA           reduce using rule 74 (primary_expression -> FNUMBER .)


state 82

    (75) primary_expression -> ID .
    LBRACKET        reduce using rule 75 (primary_expression -> ID .)
    LPAR            reduce using rule 75 (primary_expression -> ID .)
    MODULO          reduce using rule 75 (primary_expression -> ID .)
    DIVIDE          reduce using rule 75 (primary_expression -> ID .)
    TIMES           reduce using rule 75 (primary_expression -> ID .)
    MINUS           reduce using rule 75 (primary_expression -> ID .)
    PLUS            reduce using rule 75 (primary_expression -> ID .)
    LOR             reduce using rule 75 (primary_expression -> ID .)
    LAND            reduce using rule 75 (primary_expression -> ID .)
    GE              reduce using rule 75 (primary_expression -> ID .)
    GT              reduce using rule 75 (primary_expression -> ID .)
    LE              reduce using rule 75 (primary_expression -> ID .)
    LT              reduce using rule 75 (primary_expression -> ID .)
    DIVIDE_ASSIGN   reduce using rule 75 (primary_expression -> ID .)
    MODULO_ASSIGN   reduce using rule 75 (primary_expression -> ID .)
    TIMES_ASSIGN    reduce using rule 75 (primary_expression -> ID .)
    PLUS_ASSIGN     reduce using rule 75 (primary_expression -> ID .)
    MINUS_ASSIGN    reduce using rule 75 (primary_expression -> ID .)
    DECREMENT       reduce using rule 75 (primary_expression -> ID .)
    INCREMENT       reduce using rule 75 (primary_expression -> ID .)
    ASSIGN          reduce using rule 75 (primary_expression -> ID .)
    NE              reduce using rule 75 (primary_expression -> ID .)
    EQ              reduce using rule 75 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 75 (primary_expression -> ID .)
    RPAR            reduce using rule 75 (primary_expression -> ID .)
    RBRACKET        reduce using rule 75 (primary_expression -> ID .)
    COMMA           reduce using rule 75 (primary_expression -> ID .)


state 83

    (77) string_literal -> STRING .
    STRING          reduce using rule 77 (string_literal -> STRING .)
    LBRACKET        reduce using rule 77 (string_literal -> STRING .)
    LPAR            reduce using rule 77 (string_literal -> STRING .)
    MODULO          reduce using rule 77 (string_literal -> STRING .)
    DIVIDE          reduce using rule 77 (string_literal -> STRING .)
    TIMES           reduce using rule 77 (string_literal -> STRING .)
    MINUS           reduce using rule 77 (string_literal -> STRING .)
    PLUS            reduce using rule 77 (string_literal -> STRING .)
    LOR             reduce using rule 77 (string_literal -> STRING .)
    LAND            reduce using rule 77 (string_literal -> STRING .)
    GE              reduce using rule 77 (string_literal -> STRING .)
    GT              reduce using rule 77 (string_literal -> STRING .)
    LE              reduce using rule 77 (string_literal -> STRING .)
    LT              reduce using rule 77 (string_literal -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 77 (string_literal -> STRING .)
    MODULO_ASSIGN   reduce using rule 77 (string_literal -> STRING .)
    TIMES_ASSIGN    reduce using rule 77 (string_literal -> STRING .)
    PLUS_ASSIGN     reduce using rule 77 (string_literal -> STRING .)
    MINUS_ASSIGN    reduce using rule 77 (string_literal -> STRING .)
    DECREMENT       reduce using rule 77 (string_literal -> STRING .)
    INCREMENT       reduce using rule 77 (string_literal -> STRING .)
    ASSIGN          reduce using rule 77 (string_literal -> STRING .)
    NE              reduce using rule 77 (string_literal -> STRING .)
    EQ              reduce using rule 77 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 77 (string_literal -> STRING .)
    RPAR            reduce using rule 77 (string_literal -> STRING .)
    RBRACKET        reduce using rule 77 (string_literal -> STRING .)
    COMMA           reduce using rule 77 (string_literal -> STRING .)


state 84

    (12) declaration_list -> declaration_list declaration .
    EXTERN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    AMPERSAND       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LPAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FNUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 85

    (9) declaration -> type_specifier declarator . SEMICOLON
    SEMICOLON       shift and go to state 22


state 86

    (22) direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .
    LPAR            reduce using rule 22 (direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .)
    SEMICOLON       reduce using rule 22 (direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .)
    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .)
    RPAR            reduce using rule 22 (direct_declarator -> direct_declarator LPAR parameter_type_list RPAR .)


state 87

    (24) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (26) parameter_list -> parameter_list COMMA . parameter_declaration
    (28) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . DOUBLE
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . INT
    ELLIPSIS        shift and go to state 131
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    DOUBLE          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13

    parameter_declaration          shift and go to state 132
    type_specifier                 shift and go to state 38

state 88

    (28) parameter_declaration -> type_specifier declarator .
    COMMA           reduce using rule 28 (parameter_declaration -> type_specifier declarator .)
    RPAR            reduce using rule 28 (parameter_declaration -> type_specifier declarator .)


state 89

    (30) compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .
    EXTERN          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    STATIC          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    VOID            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHAR            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DOUBLE          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FLOAT           reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INT             reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    $end            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RBRACE          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FOR             reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    DO              reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    WHILE           reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    IF              reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CONTINUE        reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    BREAK           reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RETURN          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LBRACE          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    AMPERSAND       reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    TIMES           reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LNOT            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    PLUS            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    MINUS           reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LPAR            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHARACTER       reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INUMBER         reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FNUMBER         reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ID              reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    STRING          reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ELSE            reduce using rule 30 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)


state 90

    (105) statement_list -> statement_list statement .
    RBRACE          reduce using rule 105 (statement_list -> statement_list statement .)
    FOR             reduce using rule 105 (statement_list -> statement_list statement .)
    DO              reduce using rule 105 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 105 (statement_list -> statement_list statement .)
    IF              reduce using rule 105 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 105 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 105 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 105 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 105 (statement_list -> statement_list statement .)
    AMPERSAND       reduce using rule 105 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 105 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 105 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 105 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 105 (statement_list -> statement_list statement .)
    LPAR            reduce using rule 105 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 105 (statement_list -> statement_list statement .)
    INUMBER         reduce using rule 105 (statement_list -> statement_list statement .)
    FNUMBER         reduce using rule 105 (statement_list -> statement_list statement .)
    ID              reduce using rule 105 (statement_list -> statement_list statement .)
    STRING          reduce using rule 105 (statement_list -> statement_list statement .)


state 91

    (94) open_for -> FOR LPAR . expression_statement expression_statement expression RPAR open_statement
    (95) matched_for -> FOR LPAR . expression_statement expression_statement expression RPAR matched_statement
    (31) expression_statement -> . expression SEMICOLON
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 133
    expression                     shift and go to state 57
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 92

    (70) primary_expression -> LPAR expression . RPAR
    RPAR            shift and go to state 134


state 93

    (31) expression_statement -> expression SEMICOLON .
    RBRACE          reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    LNOT            reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    LPAR            reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 31 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 31 (expression_statement -> expression SEMICOLON .)


state 94

    (93) open_dowhile -> DO open_statement . WHILE LPAR expression RPAR
    WHILE           shift and go to state 135


state 95

    (92) matched_dowhile -> DO matched_statement . WHILE LPAR expression RPAR
    WHILE           shift and go to state 136


state 96

    (90) open_while -> WHILE LPAR . expression RPAR open_statement
    (91) matched_while -> WHILE LPAR . expression RPAR matched_statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 137
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 97

    (87) open_if -> IF LPAR . expression RPAR matched_statement ELSE open_statement
    (88) open_if -> IF LPAR . expression RPAR statement
    (89) matched_if -> IF LPAR . expression RPAR matched_statement ELSE matched_statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 138
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 98

    (83) jump_statement -> CONTINUE SEMICOLON .
    RBRACE          reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    LNOT            reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    LPAR            reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    FNUMBER         reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 83 (jump_statement -> CONTINUE SEMICOLON .)


state 99

    (84) jump_statement -> BREAK SEMICOLON .
    RBRACE          reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    LNOT            reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    LPAR            reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    FNUMBER         reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 84 (jump_statement -> BREAK SEMICOLON .)


state 100

    (85) jump_statement -> RETURN expression . SEMICOLON
    SEMICOLON       shift and go to state 139


state 101

    (86) jump_statement -> RETURN SEMICOLON .
    RBRACE          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    LNOT            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    LPAR            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 86 (jump_statement -> RETURN SEMICOLON .)


state 102

    (32) expression -> equality_expression DIVIDE_ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 140
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 103

    (33) expression -> equality_expression MODULO_ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 141
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 104

    (34) expression -> equality_expression TIMES_ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 142
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 105

    (35) expression -> equality_expression PLUS_ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 143
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 106

    (36) expression -> equality_expression MINUS_ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 144
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 107

    (37) expression -> equality_expression DECREMENT .
    SEMICOLON       reduce using rule 37 (expression -> equality_expression DECREMENT .)
    RPAR            reduce using rule 37 (expression -> equality_expression DECREMENT .)
    RBRACKET        reduce using rule 37 (expression -> equality_expression DECREMENT .)
    COMMA           reduce using rule 37 (expression -> equality_expression DECREMENT .)


state 108

    (38) expression -> equality_expression INCREMENT .
    SEMICOLON       reduce using rule 38 (expression -> equality_expression INCREMENT .)
    RPAR            reduce using rule 38 (expression -> equality_expression INCREMENT .)
    RBRACKET        reduce using rule 38 (expression -> equality_expression INCREMENT .)
    COMMA           reduce using rule 38 (expression -> equality_expression INCREMENT .)


state 109

    (39) expression -> equality_expression ASSIGN . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    equality_expression            shift and go to state 66
    expression                     shift and go to state 145
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 110

    (41) equality_expression -> equality_expression NE . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    relational_expression          shift and go to state 146
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 111

    (42) equality_expression -> equality_expression EQ . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    relational_expression          shift and go to state 147
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 112

    (44) relational_expression -> relational_expression LOR . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 148
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 113

    (45) relational_expression -> relational_expression LAND . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 149
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 114

    (46) relational_expression -> relational_expression GE . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 150
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 115

    (47) relational_expression -> relational_expression GT . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 151
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 116

    (48) relational_expression -> relational_expression LE . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 152
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 117

    (49) relational_expression -> relational_expression LT . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    additive_expression            shift and go to state 153
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 118

    (67) additive_expression -> additive_expression MINUS . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    mult_expression                shift and go to state 154
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 119

    (68) additive_expression -> additive_expression PLUS . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    mult_expression                shift and go to state 155
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 120

    (61) unary_expression -> MINUS unary_expression .
    MODULO          reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    TIMES           reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    LOR             reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    LAND            reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    MODULO_ASSIGN   reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    TIMES_ASSIGN    reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    PLUS_ASSIGN     reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    MINUS_ASSIGN    reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    DECREMENT       reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    INCREMENT       reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    ASSIGN          reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    RPAR            reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 61 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 61 (unary_expression -> MINUS unary_expression .)


state 121

    (63) mult_expression -> mult_expression MODULO . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 156
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 122

    (64) mult_expression -> mult_expression DIVIDE . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 157
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 123

    (65) mult_expression -> mult_expression TIMES . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    unary_expression               shift and go to state 158
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 124

    (60) unary_expression -> PLUS unary_expression .
    MODULO          reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    TIMES           reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    LOR             reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    LAND            reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    GE              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    GT              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    LE              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    LT              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    MODULO_ASSIGN   reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    TIMES_ASSIGN    reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    PLUS_ASSIGN     reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    MINUS_ASSIGN    reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    DECREMENT       reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    INCREMENT       reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    ASSIGN          reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    NE              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    EQ              reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    RPAR            reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 60 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 60 (unary_expression -> PLUS unary_expression .)


state 125

    (58) unary_expression -> TIMES unary_expression .
    MODULO          reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    DIVIDE          reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    TIMES           reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    MINUS           reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    PLUS            reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    LOR             reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    LAND            reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    GE              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    GT              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    LE              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    LT              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    MODULO_ASSIGN   reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    TIMES_ASSIGN    reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    PLUS_ASSIGN     reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    MINUS_ASSIGN    reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    DECREMENT       reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    INCREMENT       reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    ASSIGN          reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    NE              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    EQ              reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    SEMICOLON       reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    RPAR            reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    RBRACKET        reduce using rule 58 (unary_expression -> TIMES unary_expression .)
    COMMA           reduce using rule 58 (unary_expression -> TIMES unary_expression .)


state 126

    (57) unary_expression -> AMPERSAND unary_expression .
    MODULO          reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    TIMES           reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    MINUS           reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    PLUS            reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    LOR             reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    LAND            reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    GE              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    GT              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    LE              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    LT              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    MODULO_ASSIGN   reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    TIMES_ASSIGN    reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    PLUS_ASSIGN     reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    MINUS_ASSIGN    reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    DECREMENT       reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    INCREMENT       reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    ASSIGN          reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    NE              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    EQ              reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    SEMICOLON       reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    RPAR            reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    RBRACKET        reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)
    COMMA           reduce using rule 57 (unary_expression -> AMPERSAND unary_expression .)


state 127

    (59) unary_expression -> LNOT unary_expression .
    MODULO          reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    DIVIDE          reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    TIMES           reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    MINUS           reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    PLUS            reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    LOR             reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    LAND            reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    GE              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    GT              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    LE              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    LT              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    MODULO_ASSIGN   reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    TIMES_ASSIGN    reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    PLUS_ASSIGN     reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    MINUS_ASSIGN    reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    DECREMENT       reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    INCREMENT       reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    ASSIGN          reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    NE              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    EQ              reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    SEMICOLON       reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    RPAR            reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    RBRACKET        reduce using rule 59 (unary_expression -> LNOT unary_expression .)
    COMMA           reduce using rule 59 (unary_expression -> LNOT unary_expression .)


state 128

    (51) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    postfix_expression             shift and go to state 76
    expression                     shift and go to state 159
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 129

    (52) postfix_expression -> postfix_expression LPAR . RPAR
    (53) postfix_expression -> postfix_expression LPAR . argument_expression_list RPAR
    (55) argument_expression_list -> . argument_expression_list COMMA expression
    (56) argument_expression_list -> . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    RPAR            shift and go to state 160
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    postfix_expression             shift and go to state 76
    argument_expression_list       shift and go to state 161
    expression                     shift and go to state 162
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 130

    (76) string_literal -> string_literal STRING .
    STRING          reduce using rule 76 (string_literal -> string_literal STRING .)
    LBRACKET        reduce using rule 76 (string_literal -> string_literal STRING .)
    LPAR            reduce using rule 76 (string_literal -> string_literal STRING .)
    MODULO          reduce using rule 76 (string_literal -> string_literal STRING .)
    DIVIDE          reduce using rule 76 (string_literal -> string_literal STRING .)
    TIMES           reduce using rule 76 (string_literal -> string_literal STRING .)
    MINUS           reduce using rule 76 (string_literal -> string_literal STRING .)
    PLUS            reduce using rule 76 (string_literal -> string_literal STRING .)
    LOR             reduce using rule 76 (string_literal -> string_literal STRING .)
    LAND            reduce using rule 76 (string_literal -> string_literal STRING .)
    GE              reduce using rule 76 (string_literal -> string_literal STRING .)
    GT              reduce using rule 76 (string_literal -> string_literal STRING .)
    LE              reduce using rule 76 (string_literal -> string_literal STRING .)
    LT              reduce using rule 76 (string_literal -> string_literal STRING .)
    DIVIDE_ASSIGN   reduce using rule 76 (string_literal -> string_literal STRING .)
    MODULO_ASSIGN   reduce using rule 76 (string_literal -> string_literal STRING .)
    TIMES_ASSIGN    reduce using rule 76 (string_literal -> string_literal STRING .)
    PLUS_ASSIGN     reduce using rule 76 (string_literal -> string_literal STRING .)
    MINUS_ASSIGN    reduce using rule 76 (string_literal -> string_literal STRING .)
    DECREMENT       reduce using rule 76 (string_literal -> string_literal STRING .)
    INCREMENT       reduce using rule 76 (string_literal -> string_literal STRING .)
    ASSIGN          reduce using rule 76 (string_literal -> string_literal STRING .)
    NE              reduce using rule 76 (string_literal -> string_literal STRING .)
    EQ              reduce using rule 76 (string_literal -> string_literal STRING .)
    SEMICOLON       reduce using rule 76 (string_literal -> string_literal STRING .)
    RPAR            reduce using rule 76 (string_literal -> string_literal STRING .)
    RBRACKET        reduce using rule 76 (string_literal -> string_literal STRING .)
    COMMA           reduce using rule 76 (string_literal -> string_literal STRING .)


state 131

    (24) parameter_type_list -> parameter_list COMMA ELLIPSIS .
    RPAR            reduce using rule 24 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 132

    (26) parameter_list -> parameter_list COMMA parameter_declaration .
    COMMA           reduce using rule 26 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAR            reduce using rule 26 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 133

    (94) open_for -> FOR LPAR expression_statement . expression_statement expression RPAR open_statement
    (95) matched_for -> FOR LPAR expression_statement . expression_statement expression RPAR matched_statement
    (31) expression_statement -> . expression SEMICOLON
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 163
    expression                     shift and go to state 57
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 134

    (70) primary_expression -> LPAR expression RPAR .
    LBRACKET        reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    LPAR            reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    MODULO          reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    TIMES           reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    LOR             reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    LAND            reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    GE              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    GT              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    LE              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    LT              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    DIVIDE_ASSIGN   reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    MODULO_ASSIGN   reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    TIMES_ASSIGN    reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    PLUS_ASSIGN     reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    MINUS_ASSIGN    reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    DECREMENT       reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    INCREMENT       reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    ASSIGN          reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    NE              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    EQ              reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    SEMICOLON       reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    RBRACKET        reduce using rule 70 (primary_expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 70 (primary_expression -> LPAR expression RPAR .)


state 135

    (93) open_dowhile -> DO open_statement WHILE . LPAR expression RPAR
    LPAR            shift and go to state 164


state 136

    (92) matched_dowhile -> DO matched_statement WHILE . LPAR expression RPAR
    LPAR            shift and go to state 165


state 137

    (90) open_while -> WHILE LPAR expression . RPAR open_statement
    (91) matched_while -> WHILE LPAR expression . RPAR matched_statement
    RPAR            shift and go to state 166


state 138

    (87) open_if -> IF LPAR expression . RPAR matched_statement ELSE open_statement
    (88) open_if -> IF LPAR expression . RPAR statement
    (89) matched_if -> IF LPAR expression . RPAR matched_statement ELSE matched_statement
    RPAR            shift and go to state 167


state 139

    (85) jump_statement -> RETURN expression SEMICOLON .
    RBRACE          reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    LNOT            reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    LPAR            reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 85 (jump_statement -> RETURN expression SEMICOLON .)


state 140

    (32) expression -> equality_expression DIVIDE_ASSIGN expression .
    SEMICOLON       reduce using rule 32 (expression -> equality_expression DIVIDE_ASSIGN expression .)
    RPAR            reduce using rule 32 (expression -> equality_expression DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 32 (expression -> equality_expression DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 32 (expression -> equality_expression DIVIDE_ASSIGN expression .)


state 141

    (33) expression -> equality_expression MODULO_ASSIGN expression .
    SEMICOLON       reduce using rule 33 (expression -> equality_expression MODULO_ASSIGN expression .)
    RPAR            reduce using rule 33 (expression -> equality_expression MODULO_ASSIGN expression .)
    RBRACKET        reduce using rule 33 (expression -> equality_expression MODULO_ASSIGN expression .)
    COMMA           reduce using rule 33 (expression -> equality_expression MODULO_ASSIGN expression .)


state 142

    (34) expression -> equality_expression TIMES_ASSIGN expression .
    SEMICOLON       reduce using rule 34 (expression -> equality_expression TIMES_ASSIGN expression .)
    RPAR            reduce using rule 34 (expression -> equality_expression TIMES_ASSIGN expression .)
    RBRACKET        reduce using rule 34 (expression -> equality_expression TIMES_ASSIGN expression .)
    COMMA           reduce using rule 34 (expression -> equality_expression TIMES_ASSIGN expression .)


state 143

    (35) expression -> equality_expression PLUS_ASSIGN expression .
    SEMICOLON       reduce using rule 35 (expression -> equality_expression PLUS_ASSIGN expression .)
    RPAR            reduce using rule 35 (expression -> equality_expression PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 35 (expression -> equality_expression PLUS_ASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> equality_expression PLUS_ASSIGN expression .)


state 144

    (36) expression -> equality_expression MINUS_ASSIGN expression .
    SEMICOLON       reduce using rule 36 (expression -> equality_expression MINUS_ASSIGN expression .)
    RPAR            reduce using rule 36 (expression -> equality_expression MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 36 (expression -> equality_expression MINUS_ASSIGN expression .)
    COMMA           reduce using rule 36 (expression -> equality_expression MINUS_ASSIGN expression .)


state 145

    (39) expression -> equality_expression ASSIGN expression .
    SEMICOLON       reduce using rule 39 (expression -> equality_expression ASSIGN expression .)
    RPAR            reduce using rule 39 (expression -> equality_expression ASSIGN expression .)
    RBRACKET        reduce using rule 39 (expression -> equality_expression ASSIGN expression .)
    COMMA           reduce using rule 39 (expression -> equality_expression ASSIGN expression .)


state 146

    (41) equality_expression -> equality_expression NE relational_expression .
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . LAND additive_expression
    (46) relational_expression -> relational_expression . GE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LE additive_expression
    (49) relational_expression -> relational_expression . LT additive_expression
    DIVIDE_ASSIGN   reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    MODULO_ASSIGN   reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    TIMES_ASSIGN    reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    PLUS_ASSIGN     reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    MINUS_ASSIGN    reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    DECREMENT       reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    INCREMENT       reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    ASSIGN          reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    EQ              reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    SEMICOLON       reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    RPAR            reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    LOR             shift and go to state 112
    LAND            shift and go to state 113
    GE              shift and go to state 114
    GT              shift and go to state 115
    LE              shift and go to state 116
    LT              shift and go to state 117


state 147

    (42) equality_expression -> equality_expression EQ relational_expression .
    (44) relational_expression -> relational_expression . LOR additive_expression
    (45) relational_expression -> relational_expression . LAND additive_expression
    (46) relational_expression -> relational_expression . GE additive_expression
    (47) relational_expression -> relational_expression . GT additive_expression
    (48) relational_expression -> relational_expression . LE additive_expression
    (49) relational_expression -> relational_expression . LT additive_expression
    DIVIDE_ASSIGN   reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    MODULO_ASSIGN   reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    TIMES_ASSIGN    reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    PLUS_ASSIGN     reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    MINUS_ASSIGN    reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    DECREMENT       reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    INCREMENT       reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    ASSIGN          reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    EQ              reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    RPAR            reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 42 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             shift and go to state 112
    LAND            shift and go to state 113
    GE              shift and go to state 114
    GT              shift and go to state 115
    LE              shift and go to state 116
    LT              shift and go to state 117


state 148

    (44) relational_expression -> relational_expression LOR additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LAND            reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    GE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    GT              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    LT              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    MODULO_ASSIGN   reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    TIMES_ASSIGN    reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    PLUS_ASSIGN     reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    MINUS_ASSIGN    reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    DECREMENT       reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    INCREMENT       reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    ASSIGN          reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    NE              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    EQ              reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    RPAR            reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    RBRACKET        reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LOR additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 149

    (45) relational_expression -> relational_expression LAND additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    LAND            reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    GE              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    GT              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    LE              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    LT              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    MODULO_ASSIGN   reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    TIMES_ASSIGN    reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    PLUS_ASSIGN     reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    MINUS_ASSIGN    reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    DECREMENT       reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    INCREMENT       reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    ASSIGN          reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    NE              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    EQ              reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    RPAR            reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    RBRACKET        reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LAND additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 150

    (46) relational_expression -> relational_expression GE additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    LT              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    MODULO_ASSIGN   reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    TIMES_ASSIGN    reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    PLUS_ASSIGN     reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    MINUS_ASSIGN    reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    DECREMENT       reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    INCREMENT       reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    ASSIGN          reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    RPAR            reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    RBRACKET        reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GE additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 151

    (47) relational_expression -> relational_expression GT additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    LT              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    MODULO_ASSIGN   reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    TIMES_ASSIGN    reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    PLUS_ASSIGN     reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    MINUS_ASSIGN    reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    DECREMENT       reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    INCREMENT       reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    ASSIGN          reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    SEMICOLON       reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    RPAR            reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    RBRACKET        reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression GT additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 152

    (48) relational_expression -> relational_expression LE additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    LT              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    MODULO_ASSIGN   reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    TIMES_ASSIGN    reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    PLUS_ASSIGN     reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    MINUS_ASSIGN    reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    DECREMENT       reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    INCREMENT       reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    ASSIGN          reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    SEMICOLON       reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    RPAR            reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    RBRACKET        reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 48 (relational_expression -> relational_expression LE additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 153

    (49) relational_expression -> relational_expression LT additive_expression .
    (67) additive_expression -> additive_expression . MINUS mult_expression
    (68) additive_expression -> additive_expression . PLUS mult_expression
    LOR             reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    LT              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    DIVIDE_ASSIGN   reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    MODULO_ASSIGN   reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    TIMES_ASSIGN    reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    PLUS_ASSIGN     reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    MINUS_ASSIGN    reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    DECREMENT       reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    INCREMENT       reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    ASSIGN          reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    SEMICOLON       reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    RPAR            reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    RBRACKET        reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 49 (relational_expression -> relational_expression LT additive_expression .)
    MINUS           shift and go to state 118
    PLUS            shift and go to state 119


state 154

    (67) additive_expression -> additive_expression MINUS mult_expression .
    (63) mult_expression -> mult_expression . MODULO unary_expression
    (64) mult_expression -> mult_expression . DIVIDE unary_expression
    (65) mult_expression -> mult_expression . TIMES unary_expression
    MINUS           reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    PLUS            reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    LOR             reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    LAND            reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    GE              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    GT              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    LE              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    LT              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    DIVIDE_ASSIGN   reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    MODULO_ASSIGN   reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    TIMES_ASSIGN    reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    PLUS_ASSIGN     reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    MINUS_ASSIGN    reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    DECREMENT       reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    INCREMENT       reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    ASSIGN          reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    NE              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ              reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    SEMICOLON       reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    RPAR            reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    RBRACKET        reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    COMMA           reduce using rule 67 (additive_expression -> additive_expression MINUS mult_expression .)
    MODULO          shift and go to state 121
    DIVIDE          shift and go to state 122
    TIMES           shift and go to state 123


state 155

    (68) additive_expression -> additive_expression PLUS mult_expression .
    (63) mult_expression -> mult_expression . MODULO unary_expression
    (64) mult_expression -> mult_expression . DIVIDE unary_expression
    (65) mult_expression -> mult_expression . TIMES unary_expression
    MINUS           reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    PLUS            reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    LOR             reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    LAND            reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    GE              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    GT              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    LE              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    LT              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    DIVIDE_ASSIGN   reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    MODULO_ASSIGN   reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    TIMES_ASSIGN    reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    PLUS_ASSIGN     reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    MINUS_ASSIGN    reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    DECREMENT       reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    INCREMENT       reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    ASSIGN          reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    NE              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ              reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    SEMICOLON       reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    RPAR            reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    RBRACKET        reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    COMMA           reduce using rule 68 (additive_expression -> additive_expression PLUS mult_expression .)
    MODULO          shift and go to state 121
    DIVIDE          shift and go to state 122
    TIMES           shift and go to state 123


state 156

    (63) mult_expression -> mult_expression MODULO unary_expression .
    MODULO          reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    TIMES           reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    MINUS           reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    PLUS            reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    LOR             reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    LAND            reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    GE              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    GT              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    LE              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    LT              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    MODULO_ASSIGN   reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    TIMES_ASSIGN    reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    PLUS_ASSIGN     reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    MINUS_ASSIGN    reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    DECREMENT       reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    INCREMENT       reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    ASSIGN          reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    NE              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    EQ              reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    SEMICOLON       reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    RPAR            reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    RBRACKET        reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)
    COMMA           reduce using rule 63 (mult_expression -> mult_expression MODULO unary_expression .)


state 157

    (64) mult_expression -> mult_expression DIVIDE unary_expression .
    MODULO          reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    TIMES           reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    LOR             reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    LAND            reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    GE              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    GT              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    LE              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    LT              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    MODULO_ASSIGN   reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    TIMES_ASSIGN    reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    PLUS_ASSIGN     reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    MINUS_ASSIGN    reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    DECREMENT       reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    INCREMENT       reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    ASSIGN          reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    NE              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    EQ              reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    RPAR            reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 64 (mult_expression -> mult_expression DIVIDE unary_expression .)


state 158

    (65) mult_expression -> mult_expression TIMES unary_expression .
    MODULO          reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    TIMES           reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    MINUS           reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    PLUS            reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    LOR             reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    LAND            reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    GE              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    GT              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    LE              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    LT              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    DIVIDE_ASSIGN   reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    MODULO_ASSIGN   reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    TIMES_ASSIGN    reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    PLUS_ASSIGN     reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    MINUS_ASSIGN    reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    DECREMENT       reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    INCREMENT       reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    ASSIGN          reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    NE              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    EQ              reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    RPAR            reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)
    COMMA           reduce using rule 65 (mult_expression -> mult_expression TIMES unary_expression .)


state 159

    (51) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    RBRACKET        shift and go to state 168


state 160

    (52) postfix_expression -> postfix_expression LPAR RPAR .
    LBRACKET        reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    LPAR            reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    MODULO          reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    DIVIDE          reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    TIMES           reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    MINUS           reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    PLUS            reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    LOR             reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    LAND            reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    GE              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    GT              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    LE              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    LT              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    DIVIDE_ASSIGN   reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    MODULO_ASSIGN   reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    TIMES_ASSIGN    reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    PLUS_ASSIGN     reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    MINUS_ASSIGN    reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    DECREMENT       reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    INCREMENT       reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    ASSIGN          reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    NE              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    EQ              reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    SEMICOLON       reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    RPAR            reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    RBRACKET        reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)
    COMMA           reduce using rule 52 (postfix_expression -> postfix_expression LPAR RPAR .)


state 161

    (53) postfix_expression -> postfix_expression LPAR argument_expression_list . RPAR
    (55) argument_expression_list -> argument_expression_list . COMMA expression
    RPAR            shift and go to state 169
    COMMA           shift and go to state 170


state 162

    (56) argument_expression_list -> expression .
    RPAR            reduce using rule 56 (argument_expression_list -> expression .)
    COMMA           reduce using rule 56 (argument_expression_list -> expression .)


state 163

    (94) open_for -> FOR LPAR expression_statement expression_statement . expression RPAR open_statement
    (95) matched_for -> FOR LPAR expression_statement expression_statement . expression RPAR matched_statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 171
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 164

    (93) open_dowhile -> DO open_statement WHILE LPAR . expression RPAR
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 172
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 165

    (92) matched_dowhile -> DO matched_statement WHILE LPAR . expression RPAR
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 173
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 166

    (90) open_while -> WHILE LPAR expression RPAR . open_statement
    (91) matched_while -> WHILE LPAR expression RPAR . matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    open_statement                 shift and go to state 174
    matched_statement              shift and go to state 175
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    expression_statement           shift and go to state 56
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 167

    (87) open_if -> IF LPAR expression RPAR . matched_statement ELSE open_statement
    (88) open_if -> IF LPAR expression RPAR . statement
    (89) matched_if -> IF LPAR expression RPAR . matched_statement ELSE matched_statement
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (78) statement -> . open_statement
    (79) statement -> . matched_statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    matched_statement              shift and go to state 177
    open_statement                 shift and go to state 43
    statement                      shift and go to state 178
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    jump_statement                 shift and go to state 61
    expression_statement           shift and go to state 56
    compound_statement             shift and go to state 62
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 168

    (51) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .
    LBRACKET        reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAR            reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO_ASSIGN   reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAR            reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 51 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 169

    (53) postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .
    LBRACKET        reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    LPAR            reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    MODULO          reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    DIVIDE          reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    TIMES           reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    MINUS           reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    PLUS            reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    LOR             reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    LAND            reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    GE              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    GT              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    LE              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    LT              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    DIVIDE_ASSIGN   reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    MODULO_ASSIGN   reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    TIMES_ASSIGN    reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    PLUS_ASSIGN     reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    MINUS_ASSIGN    reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    DECREMENT       reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    INCREMENT       reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    ASSIGN          reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    NE              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    EQ              reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    SEMICOLON       reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    RPAR            reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    RBRACKET        reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)
    COMMA           reduce using rule 53 (postfix_expression -> postfix_expression LPAR argument_expression_list RPAR .)


state 170

    (55) argument_expression_list -> argument_expression_list COMMA . expression
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 182
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 171

    (94) open_for -> FOR LPAR expression_statement expression_statement expression . RPAR open_statement
    (95) matched_for -> FOR LPAR expression_statement expression_statement expression . RPAR matched_statement
    RPAR            shift and go to state 183


state 172

    (93) open_dowhile -> DO open_statement WHILE LPAR expression . RPAR
    RPAR            shift and go to state 184


state 173

    (92) matched_dowhile -> DO matched_statement WHILE LPAR expression . RPAR
    RPAR            shift and go to state 185


state 174

    (90) open_while -> WHILE LPAR expression RPAR open_statement .
    RBRACE          reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    FOR             reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    DO              reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    WHILE           reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    IF              reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    CONTINUE        reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    BREAK           reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    RETURN          reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    LBRACE          reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    AMPERSAND       reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    TIMES           reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    LNOT            reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    PLUS            reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    MINUS           reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    LPAR            reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    CHARACTER       reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    INUMBER         reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    FNUMBER         reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    ID              reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)
    STRING          reduce using rule 90 (open_while -> WHILE LPAR expression RPAR open_statement .)


state 175

    (91) matched_while -> WHILE LPAR expression RPAR matched_statement .
    RBRACE          reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    FOR             reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    DO              reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    WHILE           reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    IF              reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    CONTINUE        reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    BREAK           reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    RETURN          reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    LBRACE          reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    AMPERSAND       reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    TIMES           reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    LNOT            reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    PLUS            reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    MINUS           reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    LPAR            reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    CHARACTER       reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    INUMBER         reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    FNUMBER         reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    ID              reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    STRING          reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)
    ELSE            reduce using rule 91 (matched_while -> WHILE LPAR expression RPAR matched_statement .)


state 176

    (89) matched_if -> IF . LPAR expression RPAR matched_statement ELSE matched_statement
    (87) open_if -> IF . LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> IF . LPAR expression RPAR statement
    LPAR            shift and go to state 186


state 177

    (87) open_if -> IF LPAR expression RPAR matched_statement . ELSE open_statement
    (89) matched_if -> IF LPAR expression RPAR matched_statement . ELSE matched_statement
    (79) statement -> matched_statement .
    ELSE            shift and go to state 187
    RBRACE          reduce using rule 79 (statement -> matched_statement .)
    FOR             reduce using rule 79 (statement -> matched_statement .)
    DO              reduce using rule 79 (statement -> matched_statement .)
    WHILE           reduce using rule 79 (statement -> matched_statement .)
    IF              reduce using rule 79 (statement -> matched_statement .)
    CONTINUE        reduce using rule 79 (statement -> matched_statement .)
    BREAK           reduce using rule 79 (statement -> matched_statement .)
    RETURN          reduce using rule 79 (statement -> matched_statement .)
    LBRACE          reduce using rule 79 (statement -> matched_statement .)
    AMPERSAND       reduce using rule 79 (statement -> matched_statement .)
    TIMES           reduce using rule 79 (statement -> matched_statement .)
    LNOT            reduce using rule 79 (statement -> matched_statement .)
    PLUS            reduce using rule 79 (statement -> matched_statement .)
    MINUS           reduce using rule 79 (statement -> matched_statement .)
    LPAR            reduce using rule 79 (statement -> matched_statement .)
    CHARACTER       reduce using rule 79 (statement -> matched_statement .)
    INUMBER         reduce using rule 79 (statement -> matched_statement .)
    FNUMBER         reduce using rule 79 (statement -> matched_statement .)
    ID              reduce using rule 79 (statement -> matched_statement .)
    STRING          reduce using rule 79 (statement -> matched_statement .)


state 178

    (88) open_if -> IF LPAR expression RPAR statement .
    RBRACE          reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    FOR             reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    DO              reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    WHILE           reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    IF              reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    CONTINUE        reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    BREAK           reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    RETURN          reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    LBRACE          reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    AMPERSAND       reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    TIMES           reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    LNOT            reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    PLUS            reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    MINUS           reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    LPAR            reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    CHARACTER       reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    INUMBER         reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    FNUMBER         reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    ID              reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)
    STRING          reduce using rule 88 (open_if -> IF LPAR expression RPAR statement .)


state 179

    (95) matched_for -> FOR . LPAR expression_statement expression_statement expression RPAR matched_statement
    (94) open_for -> FOR . LPAR expression_statement expression_statement expression RPAR open_statement
    LPAR            shift and go to state 188


state 180

    (92) matched_dowhile -> DO . matched_statement WHILE LPAR expression RPAR
    (93) open_dowhile -> DO . open_statement WHILE LPAR expression RPAR
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    matched_statement              shift and go to state 95
    expression                     shift and go to state 57
    open_statement                 shift and go to state 94
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    jump_statement                 shift and go to state 61
    expression_statement           shift and go to state 56
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 181

    (91) matched_while -> WHILE . LPAR expression RPAR matched_statement
    (90) open_while -> WHILE . LPAR expression RPAR open_statement
    LPAR            shift and go to state 189


state 182

    (55) argument_expression_list -> argument_expression_list COMMA expression .
    RPAR            reduce using rule 55 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 55 (argument_expression_list -> argument_expression_list COMMA expression .)


state 183

    (94) open_for -> FOR LPAR expression_statement expression_statement expression RPAR . open_statement
    (95) matched_for -> FOR LPAR expression_statement expression_statement expression RPAR . matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 56
    expression                     shift and go to state 57
    open_statement                 shift and go to state 190
    matched_statement              shift and go to state 191
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 184

    (93) open_dowhile -> DO open_statement WHILE LPAR expression RPAR .
    RBRACE          reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    FOR             reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    DO              reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    WHILE           reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    IF              reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    CONTINUE        reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    BREAK           reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    RETURN          reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    LBRACE          reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    AMPERSAND       reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    TIMES           reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    LNOT            reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    PLUS            reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    MINUS           reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    LPAR            reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    CHARACTER       reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    INUMBER         reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    FNUMBER         reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    ID              reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)
    STRING          reduce using rule 93 (open_dowhile -> DO open_statement WHILE LPAR expression RPAR .)


state 185

    (92) matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .
    RBRACE          reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    FOR             reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    DO              reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    WHILE           reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    IF              reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    CONTINUE        reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    BREAK           reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    RETURN          reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    LBRACE          reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    AMPERSAND       reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    TIMES           reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    LNOT            reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    PLUS            reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    MINUS           reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    LPAR            reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    CHARACTER       reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    INUMBER         reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    FNUMBER         reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    ID              reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    STRING          reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)
    ELSE            reduce using rule 92 (matched_dowhile -> DO matched_statement WHILE LPAR expression RPAR .)


state 186

    (89) matched_if -> IF LPAR . expression RPAR matched_statement ELSE matched_statement
    (87) open_if -> IF LPAR . expression RPAR matched_statement ELSE open_statement
    (88) open_if -> IF LPAR . expression RPAR statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 192
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 187

    (87) open_if -> IF LPAR expression RPAR matched_statement ELSE . open_statement
    (89) matched_if -> IF LPAR expression RPAR matched_statement ELSE . matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 54
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    matched_statement              shift and go to state 193
    open_statement                 shift and go to state 194
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    expression_statement           shift and go to state 56
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 188

    (95) matched_for -> FOR LPAR . expression_statement expression_statement expression RPAR matched_statement
    (94) open_for -> FOR LPAR . expression_statement expression_statement expression RPAR open_statement
    (31) expression_statement -> . expression SEMICOLON
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 195
    expression                     shift and go to state 57
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 189

    (91) matched_while -> WHILE LPAR . expression RPAR matched_statement
    (90) open_while -> WHILE LPAR . expression RPAR open_statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 196
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 190

    (94) open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .
    RBRACE          reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    FOR             reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    DO              reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    WHILE           reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    IF              reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    CONTINUE        reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    BREAK           reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    RETURN          reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    LBRACE          reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    AMPERSAND       reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    TIMES           reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    LNOT            reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    PLUS            reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    MINUS           reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    LPAR            reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    CHARACTER       reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    INUMBER         reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    FNUMBER         reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    ID              reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)
    STRING          reduce using rule 94 (open_for -> FOR LPAR expression_statement expression_statement expression RPAR open_statement .)


state 191

    (95) matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .
    RBRACE          reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    FOR             reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    DO              reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    WHILE           reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    IF              reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    CONTINUE        reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    BREAK           reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    RETURN          reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    LBRACE          reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    AMPERSAND       reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    TIMES           reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    LNOT            reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    PLUS            reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    MINUS           reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    LPAR            reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    CHARACTER       reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    INUMBER         reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    FNUMBER         reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    ID              reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    STRING          reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)
    ELSE            reduce using rule 95 (matched_for -> FOR LPAR expression_statement expression_statement expression RPAR matched_statement .)


state 192

    (89) matched_if -> IF LPAR expression . RPAR matched_statement ELSE matched_statement
    (87) open_if -> IF LPAR expression . RPAR matched_statement ELSE open_statement
    (88) open_if -> IF LPAR expression . RPAR statement
    RPAR            shift and go to state 197


state 193

    (89) matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .
    RBRACE          reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    FOR             reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    DO              reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    WHILE           reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    IF              reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    CONTINUE        reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    BREAK           reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    RETURN          reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    LBRACE          reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    AMPERSAND       reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    TIMES           reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    LNOT            reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    PLUS            reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    MINUS           reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    LPAR            reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    CHARACTER       reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    INUMBER         reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    FNUMBER         reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    ID              reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    STRING          reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)
    ELSE            reduce using rule 89 (matched_if -> IF LPAR expression RPAR matched_statement ELSE matched_statement .)


state 194

    (87) open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .
    RBRACE          reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    FOR             reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    DO              reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    WHILE           reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    IF              reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    CONTINUE        reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    BREAK           reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    RETURN          reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    LBRACE          reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    AMPERSAND       reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    TIMES           reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    LNOT            reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    PLUS            reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    MINUS           reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    LPAR            reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    CHARACTER       reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    INUMBER         reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    FNUMBER         reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    ID              reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)
    STRING          reduce using rule 87 (open_if -> IF LPAR expression RPAR matched_statement ELSE open_statement .)


state 195

    (95) matched_for -> FOR LPAR expression_statement . expression_statement expression RPAR matched_statement
    (94) open_for -> FOR LPAR expression_statement . expression_statement expression RPAR open_statement
    (31) expression_statement -> . expression SEMICOLON
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 198
    expression                     shift and go to state 57
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 196

    (91) matched_while -> WHILE LPAR expression . RPAR matched_statement
    (90) open_while -> WHILE LPAR expression . RPAR open_statement
    RPAR            shift and go to state 199


state 197

    (89) matched_if -> IF LPAR expression RPAR . matched_statement ELSE matched_statement
    (87) open_if -> IF LPAR expression RPAR . matched_statement ELSE open_statement
    (88) open_if -> IF LPAR expression RPAR . statement
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (78) statement -> . open_statement
    (79) statement -> . matched_statement
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    matched_statement              shift and go to state 200
    open_statement                 shift and go to state 43
    statement                      shift and go to state 178
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    jump_statement                 shift and go to state 61
    expression_statement           shift and go to state 56
    compound_statement             shift and go to state 62
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 198

    (95) matched_for -> FOR LPAR expression_statement expression_statement . expression RPAR matched_statement
    (94) open_for -> FOR LPAR expression_statement expression_statement . expression RPAR open_statement
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 201
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 199

    (91) matched_while -> WHILE LPAR expression RPAR . matched_statement
    (90) open_while -> WHILE LPAR expression RPAR . open_statement
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    matched_statement              shift and go to state 175
    open_statement                 shift and go to state 174
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    jump_statement                 shift and go to state 61
    expression_statement           shift and go to state 56
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 200

    (89) matched_if -> IF LPAR expression RPAR matched_statement . ELSE matched_statement
    (87) open_if -> IF LPAR expression RPAR matched_statement . ELSE open_statement
    (79) statement -> matched_statement .
    ELSE            shift and go to state 202
    RBRACE          reduce using rule 79 (statement -> matched_statement .)
    FOR             reduce using rule 79 (statement -> matched_statement .)
    DO              reduce using rule 79 (statement -> matched_statement .)
    WHILE           reduce using rule 79 (statement -> matched_statement .)
    IF              reduce using rule 79 (statement -> matched_statement .)
    CONTINUE        reduce using rule 79 (statement -> matched_statement .)
    BREAK           reduce using rule 79 (statement -> matched_statement .)
    RETURN          reduce using rule 79 (statement -> matched_statement .)
    LBRACE          reduce using rule 79 (statement -> matched_statement .)
    AMPERSAND       reduce using rule 79 (statement -> matched_statement .)
    TIMES           reduce using rule 79 (statement -> matched_statement .)
    LNOT            reduce using rule 79 (statement -> matched_statement .)
    PLUS            reduce using rule 79 (statement -> matched_statement .)
    MINUS           reduce using rule 79 (statement -> matched_statement .)
    LPAR            reduce using rule 79 (statement -> matched_statement .)
    CHARACTER       reduce using rule 79 (statement -> matched_statement .)
    INUMBER         reduce using rule 79 (statement -> matched_statement .)
    FNUMBER         reduce using rule 79 (statement -> matched_statement .)
    ID              reduce using rule 79 (statement -> matched_statement .)
    STRING          reduce using rule 79 (statement -> matched_statement .)


state 201

    (95) matched_for -> FOR LPAR expression_statement expression_statement expression . RPAR matched_statement
    (94) open_for -> FOR LPAR expression_statement expression_statement expression . RPAR open_statement
    RPAR            shift and go to state 203


state 202

    (89) matched_if -> IF LPAR expression RPAR matched_statement ELSE . matched_statement
    (87) open_if -> IF LPAR expression RPAR matched_statement ELSE . open_statement
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression                     shift and go to state 57
    matched_statement              shift and go to state 193
    open_statement                 shift and go to state 194
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    jump_statement                 shift and go to state 61
    expression_statement           shift and go to state 56
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78

state 203

    (95) matched_for -> FOR LPAR expression_statement expression_statement expression RPAR . matched_statement
    (94) open_for -> FOR LPAR expression_statement expression_statement expression RPAR . open_statement
    (96) matched_statement -> . simple_statement
    (97) matched_statement -> . matched_for
    (98) matched_statement -> . matched_dowhile
    (99) matched_statement -> . matched_while
    (100) matched_statement -> . matched_if
    (101) open_statement -> . open_for
    (102) open_statement -> . open_dowhile
    (103) open_statement -> . open_while
    (104) open_statement -> . open_if
    (80) simple_statement -> . jump_statement
    (81) simple_statement -> . expression_statement
    (82) simple_statement -> . compound_statement
    (95) matched_for -> . FOR LPAR expression_statement expression_statement expression RPAR matched_statement
    (92) matched_dowhile -> . DO matched_statement WHILE LPAR expression RPAR
    (91) matched_while -> . WHILE LPAR expression RPAR matched_statement
    (89) matched_if -> . IF LPAR expression RPAR matched_statement ELSE matched_statement
    (94) open_for -> . FOR LPAR expression_statement expression_statement expression RPAR open_statement
    (93) open_dowhile -> . DO open_statement WHILE LPAR expression RPAR
    (90) open_while -> . WHILE LPAR expression RPAR open_statement
    (87) open_if -> . IF LPAR expression RPAR matched_statement ELSE open_statement
    (88) open_if -> . IF LPAR expression RPAR statement
    (83) jump_statement -> . CONTINUE SEMICOLON
    (84) jump_statement -> . BREAK SEMICOLON
    (85) jump_statement -> . RETURN expression SEMICOLON
    (86) jump_statement -> . RETURN SEMICOLON
    (31) expression_statement -> . expression SEMICOLON
    (29) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (30) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (32) expression -> . equality_expression DIVIDE_ASSIGN expression
    (33) expression -> . equality_expression MODULO_ASSIGN expression
    (34) expression -> . equality_expression TIMES_ASSIGN expression
    (35) expression -> . equality_expression PLUS_ASSIGN expression
    (36) expression -> . equality_expression MINUS_ASSIGN expression
    (37) expression -> . equality_expression DECREMENT
    (38) expression -> . equality_expression INCREMENT
    (39) expression -> . equality_expression ASSIGN expression
    (40) expression -> . equality_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) equality_expression -> . equality_expression EQ relational_expression
    (43) equality_expression -> . relational_expression
    (44) relational_expression -> . relational_expression LOR additive_expression
    (45) relational_expression -> . relational_expression LAND additive_expression
    (46) relational_expression -> . relational_expression GE additive_expression
    (47) relational_expression -> . relational_expression GT additive_expression
    (48) relational_expression -> . relational_expression LE additive_expression
    (49) relational_expression -> . relational_expression LT additive_expression
    (50) relational_expression -> . additive_expression
    (67) additive_expression -> . additive_expression MINUS mult_expression
    (68) additive_expression -> . additive_expression PLUS mult_expression
    (69) additive_expression -> . mult_expression
    (63) mult_expression -> . mult_expression MODULO unary_expression
    (64) mult_expression -> . mult_expression DIVIDE unary_expression
    (65) mult_expression -> . mult_expression TIMES unary_expression
    (66) mult_expression -> . unary_expression
    (57) unary_expression -> . AMPERSAND unary_expression
    (58) unary_expression -> . TIMES unary_expression
    (59) unary_expression -> . LNOT unary_expression
    (60) unary_expression -> . PLUS unary_expression
    (61) unary_expression -> . MINUS unary_expression
    (62) unary_expression -> . postfix_expression
    (51) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (52) postfix_expression -> . postfix_expression LPAR RPAR
    (53) postfix_expression -> . postfix_expression LPAR argument_expression_list RPAR
    (54) postfix_expression -> . primary_expression
    (70) primary_expression -> . LPAR expression RPAR
    (71) primary_expression -> . string_literal
    (72) primary_expression -> . CHARACTER
    (73) primary_expression -> . INUMBER
    (74) primary_expression -> . FNUMBER
    (75) primary_expression -> . ID
    (76) string_literal -> . string_literal STRING
    (77) string_literal -> . STRING
    FOR             shift and go to state 179
    DO              shift and go to state 180
    WHILE           shift and go to state 181
    IF              shift and go to state 176
    CONTINUE        shift and go to state 63
    BREAK           shift and go to state 64
    RETURN          shift and go to state 65
    LBRACE          shift and go to state 24
    AMPERSAND       shift and go to state 74
    TIMES           shift and go to state 73
    LNOT            shift and go to state 75
    PLUS            shift and go to state 71
    MINUS           shift and go to state 69
    LPAR            shift and go to state 55
    CHARACTER       shift and go to state 79
    INUMBER         shift and go to state 80
    FNUMBER         shift and go to state 81
    ID              shift and go to state 82
    STRING          shift and go to state 83

    expression_statement           shift and go to state 56
    expression                     shift and go to state 57
    matched_statement              shift and go to state 191
    open_statement                 shift and go to state 190
    simple_statement               shift and go to state 49
    matched_for                    shift and go to state 50
    matched_dowhile                shift and go to state 51
    matched_while                  shift and go to state 52
    matched_if                     shift and go to state 53
    open_for                       shift and go to state 45
    open_dowhile                   shift and go to state 46
    open_while                     shift and go to state 47
    open_if                        shift and go to state 48
    jump_statement                 shift and go to state 61
    compound_statement             shift and go to state 62
    equality_expression            shift and go to state 66
    relational_expression          shift and go to state 67
    additive_expression            shift and go to state 68
    mult_expression                shift and go to state 70
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 77
    string_literal                 shift and go to state 78